name: Code Quality Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Run Pylint
      run: |
        echo "üîç Running Pylint..."
        poetry run pylint src/ha_connector/ --recursive=y --output-format=colorized || true
        echo "üìä Pylint Score:"
        poetry run pylint src/ha_connector/ --recursive=y | grep -E "Your code has been rated at" || true

    - name: Run Ruff
      run: |
        echo "ü¶Ä Running Ruff..."
        poetry run ruff check src/ || true

    - name: Run Flake8
      run: |
        echo "üêç Running Flake8..."
        poetry run flake8 src/ || true

    - name: Run MyPy
      run: |
        echo "üîé Running MyPy..."
        poetry run mypy src/ha_connector/ || true

    - name: Run Bandit
      run: |
        echo "üõ°Ô∏è Running Bandit..."
        poetry run bandit -r src/ || true

    - name: Run Vulture
      run: |
        echo "ü¶Ö Running Vulture..."
        poetry run vulture src/ || true

    - name: Run OWASP Dependency Check
      run: |
        echo "üîí Running OWASP Dependency Check..."
        poetry run pip-audit || true

    - name: Run Safety
      run: |
        echo "üõ°Ô∏è Running Safety..."
        poetry run safety check || true

    - name: Generate Quality Report
      run: |
        echo "üìä COMPREHENSIVE CODE QUALITY SUMMARY" > quality_report.txt
        echo "=====================================" >> quality_report.txt
        echo "" >> quality_report.txt

        echo "üîç PYLINT RESULTS:" >> quality_report.txt
        poetry run pylint src/ha_connector/ --recursive=y 2>&1 | tail -10 >> quality_report.txt
        echo "" >> quality_report.txt

        echo "ü¶Ä RUFF RESULTS:" >> quality_report.txt
        poetry run ruff check src/ --output-format=text 2>&1 | head -20 >> quality_report.txt
        echo "" >> quality_report.txt

        echo "üîé MYPY RESULTS:" >> quality_report.txt
        poetry run mypy src/ha_connector/ 2>&1 | head -20 >> quality_report.txt
        echo "" >> quality_report.txt

        echo "üõ°Ô∏è BANDIT RESULTS:" >> quality_report.txt
        poetry run bandit -r src/ -f txt 2>&1 | head -20 >> quality_report.txt
        echo "" >> quality_report.txt

        echo "ü¶Ö VULTURE RESULTS:" >> quality_report.txt
        poetry run vulture src/ 2>&1 | head -20 >> quality_report.txt
        echo "" >> quality_report.txt

        echo "üîí OWASP DEPENDENCY CHECK RESULTS:" >> quality_report.txt
        poetry run pip-audit --format=text 2>&1 | head -20 >> quality_report.txt
        echo "" >> quality_report.txt

        echo "üõ°Ô∏è SAFETY CHECK RESULTS:" >> quality_report.txt
        poetry run safety check 2>&1 | head -20 >> quality_report.txt

        cat quality_report.txt

    - name: Upload Quality Report
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-report
        path: quality_report.txt

    - name: Comment PR (if PR)
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality_report.txt', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üìä Code Quality Analysis\n\n\`\`\`\n${report}\n\`\`\``
          });

  # Optional: Fail on critical issues
  quality-gate:
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Quality Gate - Critical Issues Only
      run: |
        echo "üö® Checking for critical quality issues..."

        # Check for security issues (medium/high severity)
        echo "Checking Bandit for medium/high security issues..."
        bandit_result=$(poetry run bandit -r src/ -ll -f json 2>/dev/null || echo '{"results": []}')
        critical_security=$(echo "$bandit_result" | python3 -c "
        import json, sys
        try:
            data = json.load(sys.stdin)
            critical = [r for r in data.get('results', []) if r.get('issue_severity') in ['MEDIUM', 'HIGH']]
            print(len(critical))
        except:
            print(0)
        ")

        if [ "$critical_security" -gt 0 ]; then
          echo "‚ùå Found $critical_security critical security issues!"
          exit 1
        fi

        # Check for dependency vulnerabilities
        echo "Checking for dependency vulnerabilities..."
        vuln_count=$(poetry run pip-audit --format=json 2>/dev/null | python3 -c "
        import json, sys
        try:
            data = json.load(sys.stdin)
            vulnerabilities = data.get('vulnerabilities', [])
            print(len(vulnerabilities))
        except:
            print(0)
        " || echo 0)

        if [ "$vuln_count" -gt 0 ]; then
          echo "‚ùå Found $vuln_count dependency vulnerabilities!"
          exit 1
        fi

        # Check MyPy for critical type errors (basic syntax issues)
        echo "Checking MyPy for critical type errors..."
        mypy_errors=$(poetry run mypy src/ha_connector/ 2>&1 | grep -E "(error|Error)" | wc -l || echo 0)

        if [ "$mypy_errors" -gt 50 ]; then
          echo "‚ùå Too many type errors: $mypy_errors (max: 50)"
          echo "This suggests fundamental type safety issues that should be addressed."
          exit 1
        fi

        echo "‚úÖ Quality gate passed! No critical issues blocking merge."
