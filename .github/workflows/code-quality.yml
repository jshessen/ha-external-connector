name: Code Quality Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Run Code Quality Analysis
      run: |
        echo "🚀 Running comprehensive code quality analysis using CI profile..."
        python scripts/code_quality.py --profile ci --verbose --output-file quality_report.txt

    - name: Upload Quality Report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report-${{ matrix.python-version }}
        path: quality_report.txt
        retention-days: 30

    - name: Comment PR (if PR)
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality_report.txt', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 📊 Code Quality Analysis\n\n\`\`\`\n${report}\n\`\`\``
          });

  # Quality gate: Fail on critical issues using unified code quality system
  quality-gate:
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Download Quality Report
      uses: actions/download-artifact@v4
      with:
        name: code-quality-report-3.11
        path: .

    - name: Quality Gate - Critical Issues Only
      run: |
        echo "🚨 Checking for critical quality issues using quality report..."

        # Check for security issues (medium/high severity) using Bandit
        echo "Checking Bandit for medium/high security issues..."
        bandit_result=$(python scripts/code_quality.py --tools bandit --output-file bandit_check.txt --verbose src/ 2>/dev/null || echo '')
        
        # Run bandit with JSON output for precise counting
        bandit_json=$(python -m bandit -r src/ -ll -f json 2>/dev/null || echo '{"results": []}')
        critical_security=$(echo "$bandit_json" | python3 -c "
        import json, sys
        try:
            data = json.load(sys.stdin)
            critical = [r for r in data.get('results', []) if r.get('issue_severity') in ['MEDIUM', 'HIGH']]
            print(len(critical))
        except:
            print(0)
        ")

        if [ "$critical_security" -gt 0 ]; then
          echo "❌ Found $critical_security critical security issues!"
          echo "Review the security analysis in the quality report."
          exit 1
        fi

        # Check for dependency vulnerabilities using pip-audit
        echo "Checking for dependency vulnerabilities..."
        vuln_count=$(python -m pip_audit --format=json 2>/dev/null | python3 -c "
        import json, sys
        try:
            data = json.load(sys.stdin)
            vulnerabilities = data.get('vulnerabilities', [])
            print(len(vulnerabilities))
        except:
            print(0)
        " || echo 0)

        if [ "$vuln_count" -gt 0 ]; then
          echo "❌ Found $vuln_count dependency vulnerabilities!"
          echo "Review the dependency analysis in the quality report."
          exit 1
        fi

        # Check MyPy for critical type errors (basic syntax issues)
        echo "Checking MyPy for critical type errors..."
        mypy_errors=$(python -m mypy src/ha_connector/ 2>&1 | grep -E "(error|Error)" | wc -l || echo 0)

        if [ "$mypy_errors" -gt 50 ]; then
          echo "❌ Too many type errors: $mypy_errors (max: 50)"
          echo "This suggests fundamental type safety issues that should be addressed."
          echo "Review the type checking analysis in the quality report."
          exit 1
        fi

        echo "✅ Quality gate passed! No critical issues blocking merge."
        echo "📄 Full quality analysis available in the uploaded artifact."
