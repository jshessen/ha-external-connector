[tool.flake8]
max-line-length = 88
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ha-external-connector"
version = "0.1.0"
description = "Home Assistant External Connector - Python Implementation"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "ha_connector", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
click = "^8.1.0"
httpx = "^0.25.0"
boto3 = "^1.34.0"
boto3-stubs = {extras = ["ssm"], version = "^1.34.0"}
mypy-boto3-ssm = "^1.39.9"
structlog = "^23.2.0"
rich = "^13.7.0"
typer = "^0.9.0"
asyncio-throttle = "^1.0.2"
pydantic = "^2.11.7"
pydantic-settings = "^2.10.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^1.0.0"
pytest-mock = "^3.12.0"
pytest-cov = "^6.0.0"
mypy = "^1.8.0"
black = "^25.1.0"
isort = "^6.0.0"
flake8 = "^7.0.0"
pre-commit = "^3.6.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"
mkdocstrings = "^0.24.0"
mkdocstrings-python = "^1.8.0"
bandit = "^1.7.0"
safety = "^2.3.0"
invoke = "^2.2.0"
vulture = "^2.10.0"
pip-audit = "^2.6.0"
pylint-pydantic = "^0.3.5"

[tool.poetry.scripts]
ha-connector = "ha_connector.cli.main:app"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    ".coveragerc",
    ".venv/",
    "build/",
    "dist/",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
# files
| \.coveragerc
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "aws: marks tests that require AWS credentials",
    "cloudflare: marks tests that require CloudFlare credentials",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    ".venv/*",
    "venv/*",
    "env/*",
    "ENV/*",
    "*.egg-info/*",
    "build/*",
    "dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.bandit]
exclude_dirs = ["tests",]
skips = ["B101", "B601"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".coveragerc",
]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "UP", "B", "SIM", "I"]
ignore = []
fixable = ["A", "B", "C", "D", "E", "F", "UP", "SIM", "I"]
unfixable = []

[tool.pylint.main]
load-plugins = ["pylint_pydantic"]

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-lines",  # Voice command bridge is intentionally verbose for non-technical users
    "line-too-long",  # Let ruff handle this
]

[tool.pylint.format]
max-line-length = 88

[tool.vulture]
min_confidence = 80
paths = ["src/"]
exclude = ["*test*", "*__pycache__*"]
ignore_decorators = ["@pytest.fixture", "@click.command", "@typer.command", "@classmethod", "@staticmethod"]
ignore_names = [
    "_*",
    "test_*",
    "cls",           # Pydantic classmethod parameter
    "exc_type",      # Exception handling variables
    "exc_value",
    "exc_val",
    "exc_tb",
    "traceback"
]
