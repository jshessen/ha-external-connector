
📊 Code Quality Analysis Summary
==================================================
✅ Passed: 3
⚠️ Issues found: 6 (Total: 1563)
❌ Errors: 0

📋 Detailed Results:
  ⚠️ Black: Files need formatting
  ✅ Isort: No issues found
  ⚠️ Ruff: 0 issues
  ⚠️ Flake8: 931 issues
  ⚠️ Pylint: 576 issues
  ⚠️ Mypy: 55 issues
  ✅ Bandit: No issues found
  ⚠️ Safety: 0 issues
  ✅ Pip-Audit: No issues found

💡 Suggestions:
  • Run with --fix to apply automatic fixes
  • Use --tools to focus on specific tools
  • Use --categories to run tool groups

🔧 Manual tool execution examples:
    .venv/bin/python -m mypy src/
    .venv/bin/python -m ruff check src/ tests/
    .venv/bin/python -m pylint src/
    .venv/bin/python -m bandit -r src/

================================================================================
VERBOSE OUTPUT - DETAILED TOOL RESULTS
================================================================================
This section contains the complete output from tools with issues.
Use this information for detailed remediation and analysis.
================================================================================

============================================================
TOOL: Black
RETURN CODE: 1
============================================================

STDOUT:
----------------------------------------
--- /home/runner/work/ha-external-connector/ha-external-connector/scripts/demo_security.py	2025-07-31 03:40:39.037203+00:00
+++ /home/runner/work/ha-external-connector/ha-external-connector/scripts/demo_security.py	2025-07-31 03:52:01.672000+00:00
@@ -35,13 +35,13 @@
     _demo_reporting()
     _show_framework_capabilities()
     _show_next_steps()
 
 
-def _initialize_and_show_validators() -> tuple[
-    SecurityPolicyValidator, ComplianceChecker, SecurityReporter
-]:
+def _initialize_and_show_validators() -> (
+    tuple[SecurityPolicyValidator, ComplianceChecker, SecurityReporter]
+):
     """Initialize validators and show enhanced Lambda capabilities"""
     # Initialize validators
     policy_validator = SecurityPolicyValidator()
     compliance_checker = ComplianceChecker()
     reporter = SecurityReporter()
--- /home/runner/work/ha-external-connector/ha-external-connector/scripts/code_quality.py	2025-07-31 03:48:23.559615+00:00
+++ /home/runner/work/ha-external-connector/ha-external-connector/scripts/code_quality.py	2025-07-31 03:52:02.237599+00:00
@@ -165,11 +165,21 @@
         "tools": ["black", "isort", "ruff"],
     },
     "ci": {
         "description": "Comprehensive checks for CI/CD pipeline",
         "categories": ["formatters", "linters", "type-checkers", "security"],
-        "tools": ["black", "isort", "ruff", "flake8", "pylint", "mypy", "bandit", "safety", "pip-audit"],  # Exclude pyright (Node.js tool)
+        "tools": [
+            "black",
+            "isort",
+            "ruff",
+            "flake8",
+            "pylint",
+            "mypy",
+            "bandit",
+            "safety",
+            "pip-audit",
+        ],  # Exclude pyright (Node.js tool)
     },
     "pre-commit": {
         "description": "Fast pre-commit hooks",
         "categories": ["formatters"],
         "tools": ["black", "isort", "ruff"],
--- /home/runner/work/ha-external-connector/ha-external-connector/src/ha_connector/integrations/alexa/skill_automation_manager.py	2025-07-31 03:40:39.039203+00:00
+++ /home/runner/work/ha-external-connector/ha-external-connector/src/ha_connector/integrations/alexa/skill_automation_manager.py	2025-07-31 03:52:02.495674+00:00
@@ -412,11 +412,13 @@
             access_token_uri = f"{ha_base_url}/auth/token"
             setup_type = "Direct Home Assistant OAuth"
         else:
             # Generic setup
             web_auth_uri = "https://your-homeassistant.domain.com/auth/authorize"
-            access_token_uri = "https://your-homeassistant.domain.com/auth/token"  # nosec B105
+            access_token_uri = (
+                "https://your-homeassistant.domain.com/auth/token"  # nosec B105
+            )
             setup_type = "Generic OAuth Setup"
 
         guide = f"""
 # 🏢 ALEXA SMART HOME SKILL CONFIGURATION GUIDE
 
--- /home/runner/work/ha-external-connector/ha-external-connector/tests/test_secrets.py	2025-07-31 03:40:39.042203+00:00
+++ /home/runner/work/ha-external-connector/ha-external-connector/tests/test_secrets.py	2025-07-31 03:52:02.644900+00:00
@@ -16,11 +16,13 @@
     prefix: str
     min_len: int
 
 
 def generate_test_secret(
-    secret_type: Literal["alexa", "client", "token", "generic"] = "generic",  # nosec B107
+    secret_type: Literal[
+        "alexa", "client", "token", "generic"
+    ] = "generic",  # nosec B107
     min_length: int = 8,
     custom_length: int | None = None,
 ) -> str:
     """
     Generate a test secret dynamically to avoid hardcoded values.


STDERR:
----------------------------------------
would reformat /home/runner/work/ha-external-connector/ha-external-connector/scripts/demo_security.py
would reformat /home/runner/work/ha-external-connector/ha-external-connector/scripts/code_quality.py
would reformat /home/runner/work/ha-external-connector/ha-external-connector/src/ha_connector/integrations/alexa/skill_automation_manager.py
would reformat /home/runner/work/ha-external-connector/ha-external-connector/tests/test_secrets.py

Oh no! 💥 💔 💥
4 files would be reformatted, 70 files would be left unchanged.


============================================================


============================================================
TOOL: Isort
RETURN CODE: 0
============================================================

============================================================


============================================================
TOOL: Ruff
RETURN CODE: 1
============================================================

STDERR:
----------------------------------------
/home/runner/.cache/pypoetry/virtualenvs/ha-external-connector-6nE7Bof3-py3.12/bin/python: No module named ruff


============================================================


============================================================
TOOL: Flake8
RETURN CODE: 1
============================================================

STDOUT:
----------------------------------------
scripts/agent_helper.py:44:80: E501 line too long (84 > 79 characters)
scripts/agent_helper.py:50:80: E501 line too long (81 > 79 characters)
scripts/agent_helper.py:100:80: E501 line too long (85 > 79 characters)
scripts/agent_helper.py:133:80: E501 line too long (83 > 79 characters)
scripts/code_quality.py:170:80: E501 line too long (139 > 79 characters)
scripts/code_quality.py:223:80: E501 line too long (80 > 79 characters)
scripts/code_quality.py:324:80: E501 line too long (88 > 79 characters)
scripts/code_quality.py:326:80: E501 line too long (88 > 79 characters)
scripts/code_quality.py:337:80: E501 line too long (81 > 79 characters)
scripts/code_quality.py:389:80: E501 line too long (83 > 79 characters)
scripts/code_quality.py:453:80: E501 line too long (83 > 79 characters)
scripts/code_quality.py:478:80: E501 line too long (87 > 79 characters)
scripts/code_quality.py:499:80: E501 line too long (84 > 79 characters)
scripts/code_quality.py:526:80: E501 line too long (86 > 79 characters)
scripts/code_quality.py:534:80: E501 line too long (80 > 79 characters)
scripts/code_quality.py:539:80: E501 line too long (82 > 79 characters)
scripts/code_quality.py:625:80: E501 line too long (81 > 79 characters)
scripts/code_quality.py:647:80: E501 line too long (80 > 79 characters)
scripts/code_quality.py:721:80: E501 line too long (87 > 79 characters)
scripts/code_quality.py:742:80: E501 line too long (80 > 79 characters)
scripts/code_quality.py:816:80: E501 line too long (83 > 79 characters)
scripts/code_quality.py:856:80: E501 line too long (83 > 79 characters)
scripts/code_quality.py:871:80: E501 line too long (83 > 79 characters)
scripts/code_quality.py:883:80: E501 line too long (82 > 79 characters)
scripts/demo_security.py:51:80: E501 line too long (88 > 79 characters)
scripts/demo_security.py:52:80: E501 line too long (83 > 79 characters)
scripts/demo_security.py:61:80: E501 line too long (81 > 79 characters)
scripts/demo_security.py:101:80: E501 line too long (80 > 79 characters)
scripts/demo_security.py:102:80: E501 line too long (82 > 79 characters)
scripts/demo_security.py:107:80: E501 line too long (85 > 79 characters)
scripts/demo_security.py:139:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:16:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:53:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:55:80: E501 line too long (85 > 79 characters)
scripts/deploy_shared_config.py:86:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:97:80: E501 line too long (83 > 79 characters)
scripts/deploy_shared_config.py:100:80: E501 line too long (83 > 79 characters)
scripts/deploy_shared_config.py:118:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:126:80: E501 line too long (83 > 79 characters)
scripts/deploy_shared_config.py:160:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:192:13: F841 local variable 'stripped' is assigned to but never used
scripts/deploy_shared_config.py:209:80: E501 line too long (81 > 79 characters)
scripts/deploy_shared_config.py:210:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:220:80: E501 line too long (88 > 79 characters)
scripts/deploy_shared_config.py:221:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:259:9: F841 local variable 'in_imports' is assigned to but never used
scripts/deploy_shared_config.py:288:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:292:80: E501 line too long (89 > 79 characters)
scripts/deploy_shared_config.py:303:80: E501 line too long (88 > 79 characters)
scripts/deploy_shared_config.py:310:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:315:80: E501 line too long (86 > 79 characters)
scripts/deploy_shared_config.py:364:80: E501 line too long (83 > 79 characters)
scripts/deploy_shared_config.py:389:80: E501 line too long (85 > 79 characters)
scripts/deploy_shared_config.py:405:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:429:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:436:80: E501 line too long (86 > 79 characters)
scripts/deploy_shared_config.py:437:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:465:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:499:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:523:80: E501 line too long (81 > 79 characters)
scripts/deploy_shared_config.py:560:80: E501 line too long (88 > 79 characters)
scripts/deploy_shared_config.py:566:80: E501 line too long (84 > 79 characters)
scripts/deploy_shared_config.py:587:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:613:80: E501 line too long (81 > 79 characters)
scripts/deploy_shared_config.py:645:80: E501 line too long (81 > 79 characters)
scripts/deploy_shared_config.py:649:80: E501 line too long (86 > 79 characters)
scripts/deploy_shared_config.py:665:80: E501 line too long (83 > 79 characters)
scripts/deploy_shared_config.py:693:80: E501 line too long (88 > 79 characters)
scripts/deploy_shared_config.py:715:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:764:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:782:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:799:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:843:80: E501 line too long (84 > 79 characters)
scripts/deploy_shared_config.py:844:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:847:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:851:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:856:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:859:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:882:80: E501 line too long (84 > 79 characters)
scripts/deploy_shared_config.py:910:80: E501 line too long (81 > 79 characters)
scripts/deploy_shared_config.py:967:80: E501 line too long (86 > 79 characters)
scripts/deploy_shared_config.py:974:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:1002:80: E501 line too long (84 > 79 characters)
scripts/deploy_shared_config.py:1018:80: E501 line too long (83 > 79 characters)
scripts/deploy_shared_config.py:1031:80: E501 line too long (83 > 79 characters)
scripts/deploy_shared_config.py:1045:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:1051:80: E501 line too long (84 > 79 characters)
scripts/deploy_shared_config.py:1052:80: E501 line too long (86 > 79 characters)
scripts/deploy_shared_config.py:1079:80: E501 line too long (87 > 79 characters)
scripts/deploy_shared_config.py:1099:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:1146:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:1147:80: E501 line too long (85 > 79 characters)
scripts/deploy_shared_config.py:1175:80: E501 line too long (85 > 79 characters)
scripts/deploy_shared_config.py:1206:80: E501 line too long (80 > 79 characters)
scripts/deploy_shared_config.py:1217:80: E501 line too long (82 > 79 characters)
scripts/deploy_shared_config.py:1220:80: E501 line too long (85 > 79 characters)
scripts/deploy_shared_config.py:1221:80: E501 line too long (85 > 79 characters)
scripts/deploy_shared_config.py:1222:80: E501 line too long (88 > 79 characters)
scripts/validate_lambda_markers.py:72:80: E501 line too long (86 > 79 characters)
scripts/validate_lambda_markers.py:81:80: E501 line too long (84 > 79 characters)
scripts/validate_lambda_markers.py:84:80: E501 line too long (87 > 79 characters)
scripts/validate_lambda_markers.py:95:80: E501 line too long (87 > 79 characters)
scripts/validate_lambda_markers.py:160:80: E501 line too long (80 > 79 characters)
scripts/validate_lambda_markers.py:161:80: E501 line too long (84 > 79 characters)
scripts/validate_lambda_markers.py:162:80: E501 line too long (88 > 79 characters)
scripts/validate_lambda_markers.py:163:80: E501 line too long (87 > 79 characters)
scripts/validate_lambda_markers.py:187:28: E741 ambiguous variable name 'l'
scripts/validate_lambda_markers.py:193:28: E741 ambiguous variable name 'l'
scripts/validate_lambda_markers.py:193:80: E501 line too long (80 > 79 characters)
scripts/validate_lambda_markers.py:199:27: E741 ambiguous variable name 'l'
scripts/validate_lambda_markers.py:204:80: E501 line too long (83 > 79 characters)
scripts/validate_lambda_markers.py:219:80: E501 line too long (86 > 79 characters)
src/ha_connector/__init__.py:28:80: E501 line too long (87 > 79 characters)
src/ha_connector/__init__.py:55:80: E501 line too long (81 > 79 characters)
src/ha_connector/automation/compatibility.py:4:80: E501 line too long (80 > 79 characters)
src/ha_connector/automation/compatibility.py:5:80: E501 line too long (87 > 79 characters)
src/ha_connector/automation/discovery.py:67:80: E501 line too long (85 > 79 characters)
src/ha_connector/automation/discovery.py:83:80: E501 line too long (81 > 79 characters)
src/ha_connector/automation/discovery.py:100:80: E501 line too long (80 > 79 characters)
src/ha_connector/automation/discovery.py:111:80: E501 line too long (80 > 79 characters)
src/ha_connector/automation/discovery.py:152:80: E501 line too long (83 > 79 characters)
src/ha_connector/automation/discovery.py:162:80: E501 line too long (84 > 79 characters)
src/ha_connector/cli/__init__.py:4:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:4:80: E501 line too long (84 > 79 characters)
src/ha_connector/cli/commands.py:15:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:36:80: E501 line too long (81 > 79 characters)
src/ha_connector/cli/commands.py:48:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:72:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:73:80: E501 line too long (84 > 79 characters)
src/ha_connector/cli/commands.py:78:80: E501 line too long (85 > 79 characters)
src/ha_connector/cli/commands.py:81:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:87:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:90:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:104:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/commands.py:116:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:134:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:179:80: E501 line too long (86 > 79 characters)
src/ha_connector/cli/commands.py:187:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:196:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/commands.py:203:80: E501 line too long (88 > 79 characters)
src/ha_connector/cli/commands.py:252:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:272:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:275:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/commands.py:298:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:314:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:351:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:419:80: E501 line too long (85 > 79 characters)
src/ha_connector/cli/commands.py:430:80: E501 line too long (81 > 79 characters)
src/ha_connector/cli/commands.py:436:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:450:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:471:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:480:80: E501 line too long (81 > 79 characters)
src/ha_connector/cli/commands.py:534:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/commands.py:555:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/commands.py:577:80: E501 line too long (85 > 79 characters)
src/ha_connector/cli/commands.py:584:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/commands.py:587:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:595:80: E501 line too long (88 > 79 characters)
src/ha_connector/cli/commands.py:599:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:612:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:696:80: E501 line too long (84 > 79 characters)
src/ha_connector/cli/commands.py:705:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/commands.py:707:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:734:80: E501 line too long (85 > 79 characters)
src/ha_connector/cli/commands.py:749:80: E501 line too long (88 > 79 characters)
src/ha_connector/cli/commands.py:773:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:834:80: E501 line too long (84 > 79 characters)
src/ha_connector/cli/commands.py:857:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:905:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:932:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:995:80: E501 line too long (84 > 79 characters)
src/ha_connector/cli/commands.py:1014:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:1021:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:1062:80: E501 line too long (88 > 79 characters)
src/ha_connector/cli/commands.py:1074:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:1080:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:1098:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:1144:80: E501 line too long (88 > 79 characters)
src/ha_connector/cli/commands.py:1147:80: E501 line too long (88 > 79 characters)
src/ha_connector/cli/commands.py:1172:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:1176:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:1179:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:1182:80: E501 line too long (89 > 79 characters)
src/ha_connector/cli/commands.py:1205:80: E501 line too long (81 > 79 characters)
src/ha_connector/cli/commands.py:1209:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/commands.py:1211:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:1228:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:1243:80: E501 line too long (86 > 79 characters)
src/ha_connector/cli/commands.py:1247:80: E501 line too long (84 > 79 characters)
src/ha_connector/cli/commands.py:1249:80: E501 line too long (85 > 79 characters)
src/ha_connector/cli/commands.py:1250:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:1253:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:1263:80: E501 line too long (85 > 79 characters)
src/ha_connector/cli/commands.py:1266:80: E501 line too long (88 > 79 characters)
src/ha_connector/cli/commands.py:1286:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:1289:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:1291:80: E501 line too long (87 > 79 characters)
src/ha_connector/cli/commands.py:1297:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:1301:80: E501 line too long (84 > 79 characters)
src/ha_connector/cli/commands.py:1308:80: E501 line too long (81 > 79 characters)
src/ha_connector/cli/commands.py:1310:80: E501 line too long (84 > 79 characters)
src/ha_connector/cli/commands.py:1313:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/commands.py:1319:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:1324:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/commands.py:1329:80: E501 line too long (82 > 79 characters)
src/ha_connector/cli/commands.py:1342:80: E501 line too long (86 > 79 characters)
src/ha_connector/cli/commands.py:1345:80: E501 line too long (88 > 79 characters)
src/ha_connector/cli/main.py:32:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/main.py:47:80: E501 line too long (83 > 79 characters)
src/ha_connector/cli/main.py:55:80: E501 line too long (80 > 79 characters)
src/ha_connector/cli/main.py:56:80: E501 line too long (87 > 79 characters)
src/ha_connector/config/__init__.py:91:80: E501 line too long (80 > 79 characters)
src/ha_connector/config/cloudflare_helpers.py:10:80: E501 line too long (88 > 79 characters)
src/ha_connector/config/cloudflare_helpers.py:57:80: E501 line too long (84 > 79 characters)
src/ha_connector/config/cloudflare_helpers.py:86:80: E501 line too long (81 > 79 characters)
src/ha_connector/config/cloudflare_helpers.py:110:80: E501 line too long (80 > 79 characters)
src/ha_connector/config/cloudflare_helpers.py:131:80: E501 line too long (88 > 79 characters)
src/ha_connector/config/cloudflare_helpers.py:156:80: E501 line too long (87 > 79 characters)
src/ha_connector/config/cloudflare_helpers.py:160:80: E501 line too long (82 > 79 characters)
src/ha_connector/config/cloudflare_helpers.py:163:80: E501 line too long (86 > 79 characters)
src/ha_connector/config/cloudflare_helpers.py:165:80: E501 line too long (84 > 79 characters)
src/ha_connector/config/manager.py:1:80: E501 line too long (82 > 79 characters)
src/ha_connector/config/manager.py:9:80: E501 line too long (86 > 79 characters)
src/ha_connector/config/manager.py:99:80: E501 line too long (80 > 79 characters)
src/ha_connector/config/manager.py:101:80: E501 line too long (81 > 79 characters)
src/ha_connector/config/manager.py:140:80: E501 line too long (82 > 79 characters)
src/ha_connector/config/manager.py:147:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:175:80: E501 line too long (87 > 79 characters)
src/ha_connector/config/manager.py:198:80: E501 line too long (86 > 79 characters)
src/ha_connector/config/manager.py:259:80: E501 line too long (85 > 79 characters)
src/ha_connector/config/manager.py:260:80: E501 line too long (88 > 79 characters)
src/ha_connector/config/manager.py:311:80: E501 line too long (88 > 79 characters)
src/ha_connector/config/manager.py:324:80: E501 line too long (85 > 79 characters)
src/ha_connector/config/manager.py:374:80: E501 line too long (81 > 79 characters)
src/ha_connector/config/manager.py:407:80: E501 line too long (88 > 79 characters)
src/ha_connector/config/manager.py:411:80: E501 line too long (84 > 79 characters)
src/ha_connector/config/manager.py:416:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:417:80: E501 line too long (88 > 79 characters)
src/ha_connector/config/manager.py:445:80: E501 line too long (84 > 79 characters)
src/ha_connector/config/manager.py:452:80: E501 line too long (81 > 79 characters)
src/ha_connector/config/manager.py:455:80: E501 line too long (80 > 79 characters)
src/ha_connector/config/manager.py:459:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:488:80: E501 line too long (85 > 79 characters)
src/ha_connector/config/manager.py:606:80: E501 line too long (81 > 79 characters)
src/ha_connector/config/manager.py:670:80: E501 line too long (88 > 79 characters)
src/ha_connector/config/manager.py:697:80: E501 line too long (86 > 79 characters)
src/ha_connector/config/manager.py:698:80: E501 line too long (87 > 79 characters)
src/ha_connector/config/manager.py:723:80: E501 line too long (85 > 79 characters)
src/ha_connector/config/manager.py:756:80: E501 line too long (86 > 79 characters)
src/ha_connector/config/manager.py:757:80: E501 line too long (87 > 79 characters)
src/ha_connector/config/manager.py:784:80: E501 line too long (85 > 79 characters)
src/ha_connector/config/manager.py:817:80: E501 line too long (84 > 79 characters)
src/ha_connector/config/manager.py:818:80: E501 line too long (85 > 79 characters)
src/ha_connector/config/manager.py:844:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:856:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:874:80: E501 line too long (82 > 79 characters)
src/ha_connector/config/manager.py:896:80: E501 line too long (80 > 79 characters)
src/ha_connector/config/manager.py:898:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:917:80: E501 line too long (84 > 79 characters)
src/ha_connector/config/manager.py:927:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:933:80: E501 line too long (85 > 79 characters)
src/ha_connector/config/manager.py:953:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:954:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:987:80: E501 line too long (85 > 79 characters)
src/ha_connector/config/manager.py:996:80: E501 line too long (82 > 79 characters)
src/ha_connector/config/manager.py:1001:80: E501 line too long (82 > 79 characters)
src/ha_connector/config/manager.py:1012:80: E501 line too long (85 > 79 characters)
src/ha_connector/config/manager.py:1035:80: E501 line too long (83 > 79 characters)
src/ha_connector/config/manager.py:1065:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/__init__.py:4:80: E501 line too long (81 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:17:80: E501 line too long (87 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:47:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:68:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:70:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:88:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:90:80: E501 line too long (81 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:92:80: E501 line too long (87 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:120:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:140:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:147:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:199:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:239:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:275:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:282:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:293:80: E501 line too long (82 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:313:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:317:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:346:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:385:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:408:80: E501 line too long (82 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:452:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:456:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:503:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/deploy_manager.py:523:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/integration_installer.py:42:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/integration_installer.py:49:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/integration_installer.py:56:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/integration_installer.py:58:80: E501 line too long (82 > 79 characters)
src/ha_connector/deployment/integration_installer.py:68:80: E501 line too long (81 > 79 characters)
src/ha_connector/deployment/integration_installer.py:70:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/integration_installer.py:71:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/integration_installer.py:79:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/integration_installer.py:82:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/integration_installer.py:98:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:99:80: E501 line too long (87 > 79 characters)
src/ha_connector/deployment/integration_installer.py:104:80: E501 line too long (95 > 79 characters)
src/ha_connector/deployment/integration_installer.py:120:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/integration_installer.py:123:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/integration_installer.py:145:80: E501 line too long (91 > 79 characters)
src/ha_connector/deployment/integration_installer.py:148:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/integration_installer.py:166:80: E501 line too long (91 > 79 characters)
src/ha_connector/deployment/integration_installer.py:188:80: E501 line too long (99 > 79 characters)
src/ha_connector/deployment/integration_installer.py:215:80: E501 line too long (82 > 79 characters)
src/ha_connector/deployment/integration_installer.py:221:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/integration_installer.py:233:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/integration_installer.py:240:80: E501 line too long (82 > 79 characters)
src/ha_connector/deployment/integration_installer.py:264:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/integration_installer.py:269:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/integration_installer.py:283:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/integration_installer.py:320:80: E501 line too long (81 > 79 characters)
src/ha_connector/deployment/integration_installer.py:323:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/integration_installer.py:377:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/integration_installer.py:385:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/integration_installer.py:405:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:408:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:409:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/integration_installer.py:410:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/integration_installer.py:412:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/integration_installer.py:465:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:468:80: E501 line too long (82 > 79 characters)
src/ha_connector/deployment/integration_installer.py:493:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/integration_installer.py:494:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:495:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:498:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:524:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/integration_installer.py:533:80: E501 line too long (87 > 79 characters)
src/ha_connector/deployment/integration_installer.py:543:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:649:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:653:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/integration_installer.py:683:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/integration_installer.py:741:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/integration_installer.py:745:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/integration_installer.py:748:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/integration_installer.py:756:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/service_installer.py:40:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/service_installer.py:47:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/service_installer.py:54:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/service_installer.py:56:80: E501 line too long (82 > 79 characters)
src/ha_connector/deployment/service_installer.py:66:80: E501 line too long (81 > 79 characters)
src/ha_connector/deployment/service_installer.py:68:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/service_installer.py:69:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/service_installer.py:77:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/service_installer.py:80:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/service_installer.py:97:80: E501 line too long (95 > 79 characters)
src/ha_connector/deployment/service_installer.py:151:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/service_installer.py:156:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/service_installer.py:170:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/service_installer.py:207:80: E501 line too long (81 > 79 characters)
src/ha_connector/deployment/service_installer.py:210:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/service_installer.py:264:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/service_installer.py:272:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/service_installer.py:292:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/service_installer.py:295:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/service_installer.py:296:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/service_installer.py:297:80: E501 line too long (84 > 79 characters)
src/ha_connector/deployment/service_installer.py:299:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/service_installer.py:367:80: E501 line too long (85 > 79 characters)
src/ha_connector/deployment/service_installer.py:376:80: E501 line too long (87 > 79 characters)
src/ha_connector/deployment/service_installer.py:386:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/service_installer.py:492:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/service_installer.py:496:80: E501 line too long (83 > 79 characters)
src/ha_connector/deployment/service_installer.py:538:80: E501 line too long (80 > 79 characters)
src/ha_connector/deployment/service_installer.py:542:80: E501 line too long (88 > 79 characters)
src/ha_connector/deployment/service_installer.py:545:80: E501 line too long (86 > 79 characters)
src/ha_connector/deployment/service_installer.py:553:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/__init__.py:10:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:2:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:6:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:7:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:9:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:15:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:20:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:22:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:30:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:36:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:42:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:44:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:53:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:54:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:58:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:68:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:73:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:76:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:113:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:126:80: E501 line too long (91 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:162:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:163:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:164:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:166:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:191:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:205:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:241:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:243:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:244:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:246:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:252:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:263:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:265:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:268:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:269:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:270:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:279:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:312:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:334:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:335:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:369:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:374:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:379:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:380:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:389:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:406:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:431:80: E501 line too long (89 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:457:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:461:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:467:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:471:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:494:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:499:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:508:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:536:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:544:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:545:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:560:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:585:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:586:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:591:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/configuration_manager.py:610:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:6:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:7:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:24:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:47:80: E501 line too long (91 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:107:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:128:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:133:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:141:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:147:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:148:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:171:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:173:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:178:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:189:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:208:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:230:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:289:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:295:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:358:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:364:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:433:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:451:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:452:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:473:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:492:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:510:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:579:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:593:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:595:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:609:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:15:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:16:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:40:80: E501 line too long (91 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:80:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:88:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:99:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:101:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:103:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:162:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:170:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:217:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:219:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:225:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:348:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:349:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:364:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:366:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:433:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:469:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:475:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:476:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:477:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:478:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:481:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:485:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:488:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:491:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:497:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:514:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:552:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:557:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:558:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:614:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:615:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:633:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:649:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:688:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:697:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:698:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:737:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:738:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:740:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:743:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:794:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:804:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:810:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:833:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:836:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:844:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:846:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:895:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:901:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1036:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1102:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1103:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1124:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1125:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1137:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1155:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1172:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1177:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1226:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1230:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1231:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1232:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1236:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1254:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1309:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1310:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1322:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1323:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1341:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1352:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:98:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:111:80: E501 line too long (89 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:112:80: E501 line too long (91 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:178:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:197:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:203:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:215:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:233:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:260:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:271:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:280:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:291:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:315:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:327:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:335:80: E501 line too long (80 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:344:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:363:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:399:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:420:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:435:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:484:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:506:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:525:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:545:80: E501 line too long (91 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:564:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:585:80: E501 line too long (88 > 79 characters)
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:592:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:82:80: E501 line too long (111 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:87:80: E501 line too long (83 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:152:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:163:80: E501 line too long (84 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:179:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:211:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:230:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:238:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:244:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:313:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:318:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:321:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:347:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:356:80: E501 line too long (86 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:367:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:377:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:416:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:417:80: E501 line too long (95 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:439:80: E501 line too long (87 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:493:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:522:80: E501 line too long (85 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:543:80: E501 line too long (81 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:583:80: E501 line too long (82 > 79 characters)
src/ha_connector/integrations/alexa/skill_automation_manager.py:585:80: E501 line too long (83 > 79 characters)
src/ha_connector/models/__init__.py:9:80: E501 line too long (80 > 79 characters)
src/ha_connector/models/__init__.py:61:80: E501 line too long (80 > 79 characters)
src/ha_connector/models/__init__.py:85:80: E501 line too long (84 > 79 characters)
src/ha_connector/models/__init__.py:89:80: E501 line too long (81 > 79 characters)
src/ha_connector/models/__init__.py:118:80: E501 line too long (83 > 79 characters)
src/ha_connector/models/__init__.py:162:80: E501 line too long (82 > 79 characters)
src/ha_connector/models/__init__.py:174:80: E501 line too long (82 > 79 characters)
src/ha_connector/models/__init__.py:175:80: E501 line too long (83 > 79 characters)
src/ha_connector/models/__init__.py:186:80: E501 line too long (88 > 79 characters)
src/ha_connector/models/__init__.py:200:80: E501 line too long (85 > 79 characters)
src/ha_connector/models/__init__.py:226:80: E501 line too long (83 > 79 characters)
src/ha_connector/models/__init__.py:227:80: E501 line too long (81 > 79 characters)
src/ha_connector/models/__init__.py:229:80: E501 line too long (82 > 79 characters)
src/ha_connector/models/__init__.py:246:80: E501 line too long (82 > 79 characters)
src/ha_connector/models/__init__.py:247:80: E501 line too long (81 > 79 characters)
src/ha_connector/models/__init__.py:284:80: E501 line too long (80 > 79 characters)
src/ha_connector/models/__init__.py:291:80: E501 line too long (82 > 79 characters)
src/ha_connector/models/__init__.py:303:80: E501 line too long (81 > 79 characters)
src/ha_connector/models/__init__.py:310:80: E501 line too long (84 > 79 characters)
src/ha_connector/models/__init__.py:311:80: E501 line too long (80 > 79 characters)
src/ha_connector/models/__init__.py:322:80: E501 line too long (86 > 79 characters)
src/ha_connector/models/__init__.py:324:80: E501 line too long (83 > 79 characters)
src/ha_connector/models/__init__.py:350:80: E501 line too long (81 > 79 characters)
src/ha_connector/models/__init__.py:364:80: E501 line too long (84 > 79 characters)
src/ha_connector/models/__init__.py:432:80: E501 line too long (86 > 79 characters)
src/ha_connector/models/__init__.py:458:80: E501 line too long (85 > 79 characters)
src/ha_connector/models/__init__.py:459:80: E501 line too long (81 > 79 characters)
src/ha_connector/models/__init__.py:460:80: E501 line too long (85 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:17:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:68:80: E501 line too long (81 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:73:80: E501 line too long (80 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:77:80: E501 line too long (84 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:89:80: E501 line too long (86 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:94:80: E501 line too long (87 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:98:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:125:80: E501 line too long (81 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:127:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:131:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:135:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:143:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:147:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:151:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:171:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:177:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:181:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:189:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:193:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:197:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:213:80: E501 line too long (81 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:234:80: E501 line too long (82 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:250:80: E501 line too long (85 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:259:80: E501 line too long (81 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:262:80: E501 line too long (87 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:276:80: E501 line too long (84 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:279:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:291:80: E501 line too long (86 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:295:80: E501 line too long (80 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:296:80: E501 line too long (82 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:297:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:309:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:332:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:333:80: E501 line too long (82 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:334:80: E501 line too long (82 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:335:80: E501 line too long (84 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:350:80: E501 line too long (87 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:362:80: E501 line too long (80 > 79 characters)
src/ha_connector/platforms/aws/resource_manager.py:364:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:2:80: E501 line too long (80 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:76:80: E501 line too long (82 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:88:80: E501 line too long (80 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:108:80: E501 line too long (81 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:140:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:160:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:176:80: E501 line too long (86 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:182:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:185:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:196:80: E501 line too long (81 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:207:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:230:80: E501 line too long (82 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:249:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:252:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:266:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:272:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:275:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:286:80: E501 line too long (81 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:289:80: E501 line too long (86 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:295:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:315:80: E501 line too long (80 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:331:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:385:80: E501 line too long (84 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:399:80: E501 line too long (85 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:401:80: E501 line too long (80 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:419:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:427:80: E501 line too long (81 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:458:80: E501 line too long (83 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:466:80: E501 line too long (85 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:468:80: E501 line too long (80 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:478:80: E501 line too long (87 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:485:80: E501 line too long (84 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:503:80: E501 line too long (88 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:511:80: E501 line too long (81 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:548:80: E501 line too long (80 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:552:80: E501 line too long (84 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:557:80: E501 line too long (87 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:586:80: E501 line too long (84 > 79 characters)
src/ha_connector/platforms/cloudflare/api_manager.py:613:80: E501 line too long (86 > 79 characters)
src/ha_connector/security/__init__.py:4:80: E501 line too long (82 > 79 characters)
src/ha_connector/security/lambda_validator.py:14:80: E501 line too long (85 > 79 characters)
src/ha_connector/security/lambda_validator.py:43:80: E501 line too long (100 > 79 characters)
src/ha_connector/security/lambda_validator.py:49:80: E501 line too long (99 > 79 characters)
src/ha_connector/security/lambda_validator.py:64:80: E501 line too long (81 > 79 characters)
src/ha_connector/security/lambda_validator.py:98:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/lambda_validator.py:99:80: E501 line too long (84 > 79 characters)
src/ha_connector/security/lambda_validator.py:111:80: E501 line too long (80 > 79 characters)
src/ha_connector/security/lambda_validator.py:114:80: E501 line too long (82 > 79 characters)
src/ha_connector/security/lambda_validator.py:130:80: E501 line too long (80 > 79 characters)
src/ha_connector/security/lambda_validator.py:187:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/lambda_validator.py:218:80: E501 line too long (82 > 79 characters)
src/ha_connector/security/lambda_validator.py:235:80: E501 line too long (83 > 79 characters)
src/ha_connector/security/lambda_validator.py:263:80: E501 line too long (82 > 79 characters)
src/ha_connector/security/lambda_validator.py:296:80: E501 line too long (85 > 79 characters)
src/ha_connector/security/lambda_validator.py:314:80: E501 line too long (84 > 79 characters)
src/ha_connector/security/lambda_validator.py:336:80: E501 line too long (86 > 79 characters)
src/ha_connector/security/lambda_validator.py:347:80: E501 line too long (84 > 79 characters)
src/ha_connector/security/lambda_validator.py:358:80: E501 line too long (85 > 79 characters)
src/ha_connector/security/lambda_validator.py:370:80: E501 line too long (87 > 79 characters)
src/ha_connector/security/lambda_validator.py:371:80: E501 line too long (80 > 79 characters)
src/ha_connector/security/lambda_validator.py:372:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/lambda_validator.py:397:80: E501 line too long (85 > 79 characters)
src/ha_connector/security/lambda_validator.py:494:80: E501 line too long (81 > 79 characters)
src/ha_connector/security/lambda_validator.py:508:80: E501 line too long (82 > 79 characters)
src/ha_connector/security/lambda_validator.py:576:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/lambda_validator.py:644:80: E501 line too long (80 > 79 characters)
src/ha_connector/security/lambda_validator.py:661:80: E501 line too long (82 > 79 characters)
src/ha_connector/security/lambda_validator.py:735:80: E501 line too long (87 > 79 characters)
src/ha_connector/security/lambda_validator.py:743:80: E501 line too long (83 > 79 characters)
src/ha_connector/security/lambda_validator.py:820:80: E501 line too long (82 > 79 characters)
src/ha_connector/security/lambda_validator.py:851:80: E501 line too long (87 > 79 characters)
src/ha_connector/security/lambda_validator.py:876:80: E501 line too long (87 > 79 characters)
src/ha_connector/security/lambda_validator.py:881:80: E501 line too long (87 > 79 characters)
src/ha_connector/security/lambda_validator.py:885:80: E501 line too long (80 > 79 characters)
src/ha_connector/security/lambda_validator.py:902:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/lambda_validator.py:911:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/lambda_validator.py:947:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/lambda_validator.py:962:80: E501 line too long (87 > 79 characters)
src/ha_connector/security/lambda_validator.py:985:80: E501 line too long (83 > 79 characters)
src/ha_connector/security/lambda_validator.py:998:80: E501 line too long (85 > 79 characters)
src/ha_connector/security/lambda_validator.py:1003:80: E501 line too long (84 > 79 characters)
src/ha_connector/security/lambda_validator.py:1053:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/lambda_validator.py:1073:80: E501 line too long (87 > 79 characters)
src/ha_connector/security/lambda_validator.py:1093:80: E501 line too long (85 > 79 characters)
src/ha_connector/security/lambda_validator.py:1096:80: E501 line too long (81 > 79 characters)
src/ha_connector/security/lambda_validator.py:1107:80: E501 line too long (82 > 79 characters)
src/ha_connector/security/lambda_validator.py:1120:80: E501 line too long (83 > 79 characters)
src/ha_connector/security/lambda_validator.py:1142:80: E501 line too long (87 > 79 characters)
src/ha_connector/security/models.py:65:80: E501 line too long (85 > 79 characters)
src/ha_connector/security/models.py:93:80: E501 line too long (80 > 79 characters)
src/ha_connector/security/models.py:134:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/models.py:139:80: E501 line too long (86 > 79 characters)
src/ha_connector/security/policy_validator.py:29:80: E501 line too long (83 > 79 characters)
src/ha_connector/security/policy_validator.py:73:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/policy_validator.py:135:80: E501 line too long (88 > 79 characters)
src/ha_connector/security/policy_validator.py:188:80: E501 line too long (80 > 79 characters)
src/ha_connector/security/policy_validator.py:274:80: E501 line too long (84 > 79 characters)
src/ha_connector/security/policy_validator.py:396:80: E501 line too long (87 > 79 characters)
src/ha_connector/security/policy_validator.py:404:80: E501 line too long (83 > 79 characters)
src/ha_connector/security/policy_validator.py:416:80: E501 line too long (81 > 79 characters)
src/ha_connector/security/policy_validator.py:427:80: E501 line too long (86 > 79 characters)
src/ha_connector/utils/helpers.py:38:80: E501 line too long (83 > 79 characters)
src/ha_connector/utils/helpers.py:57:80: E501 line too long (86 > 79 characters)
src/ha_connector/utils/helpers.py:127:80: E501 line too long (83 > 79 characters)
src/ha_connector/utils/helpers.py:133:80: E501 line too long (85 > 79 characters)
src/ha_connector/utils/helpers.py:163:80: E501 line too long (85 > 79 characters)
src/ha_connector/utils/helpers.py:166:80: E501 line too long (85 > 79 characters)
src/ha_connector/utils/helpers.py:210:80: E501 line too long (81 > 79 characters)
src/ha_connector/utils/helpers.py:240:80: E501 line too long (88 > 79 characters)
src/ha_connector/utils/helpers.py:356:80: E501 line too long (87 > 79 characters)
src/ha_connector/utils/helpers.py:371:80: E501 line too long (80 > 79 characters)
src/ha_connector/utils/helpers.py:382:80: E501 line too long (82 > 79 characters)
src/ha_connector/utils/helpers.py:400:80: E501 line too long (82 > 79 characters)
src/ha_connector/utils/helpers.py:436:80: E501 line too long (86 > 79 characters)
src/ha_connector/utils/helpers.py:452:80: E501 line too long (84 > 79 characters)
src/ha_connector/web/__init__.py:17:80: E501 line too long (80 > 79 characters)
src/ha_connector/web/__init__.py:62:80: E501 line too long (82 > 79 characters)
src/ha_connector/web/__init__.py:74:80: E501 line too long (80 > 79 characters)
src/ha_connector/web/api/integrations.py:37:80: E501 line too long (84 > 79 characters)
src/ha_connector/web/api/setup.py:104:80: E501 line too long (80 > 79 characters)
tests/conftest.py:222:80: E501 line too long (87 > 79 characters)
tests/conftest.py:235:80: E501 line too long (84 > 79 characters)
tests/conftest.py:236:80: E501 line too long (83 > 79 characters)
tests/conftest.py:249:80: E501 line too long (85 > 79 characters)
tests/conftest.py:250:80: E501 line too long (83 > 79 characters)
tests/conftest.py:309:80: E501 line too long (80 > 79 characters)
tests/conftest.py:336:80: E501 line too long (85 > 79 characters)
tests/conftest.py:340:80: E501 line too long (84 > 79 characters)
tests/conftest.py:353:80: E501 line too long (81 > 79 characters)
tests/fixtures/aws_fixtures.py:28:80: E501 line too long (87 > 79 characters)
tests/fixtures/aws_fixtures.py:49:80: E501 line too long (92 > 79 characters)
tests/fixtures/aws_fixtures.py:56:80: E501 line too long (92 > 79 characters)
tests/fixtures/aws_fixtures.py:63:80: E501 line too long (92 > 79 characters)
tests/fixtures/aws_fixtures.py:70:80: E501 line too long (87 > 79 characters)
tests/fixtures/aws_fixtures.py:118:80: E501 line too long (81 > 79 characters)
tests/fixtures/aws_fixtures.py:132:80: E501 line too long (84 > 79 characters)
tests/fixtures/aws_fixtures.py:150:80: E501 line too long (82 > 79 characters)
tests/fixtures/aws_test_framework.py:3:80: E501 line too long (81 > 79 characters)
tests/fixtures/cloudflare_fixtures.py:87:80: E501 line too long (82 > 79 characters)
tests/fixtures/test_secrets.py:25:80: E501 line too long (80 > 79 characters)
tests/integration/test_integration.py:4:80: E501 line too long (82 > 79 characters)
tests/integration/test_integration.py:52:80: E501 line too long (88 > 79 characters)
tests/integration/test_integration.py:71:80: E501 line too long (87 > 79 characters)
tests/integration/test_integration.py:97:80: E501 line too long (87 > 79 characters)
tests/integration/test_integration.py:117:80: E501 line too long (88 > 79 characters)
tests/integration/test_integration.py:123:80: E501 line too long (83 > 79 characters)
tests/integration/test_integration.py:130:80: E501 line too long (83 > 79 characters)
tests/integration/test_integration.py:148:80: E501 line too long (85 > 79 characters)
tests/integration/test_integration.py:152:80: E501 line too long (83 > 79 characters)
tests/integration/test_integration.py:195:80: E501 line too long (80 > 79 characters)
tests/integration/test_integration.py:225:80: E501 line too long (83 > 79 characters)
tests/integration/test_integration.py:245:80: E501 line too long (85 > 79 characters)
tests/integration/test_integration.py:294:80: E501 line too long (81 > 79 characters)
tests/integration/test_integration.py:316:80: E501 line too long (86 > 79 characters)
tests/integration/test_integration.py:347:80: E501 line too long (83 > 79 characters)
tests/integration/test_integration.py:370:80: E501 line too long (87 > 79 characters)
tests/integration/test_integration.py:414:80: E501 line too long (82 > 79 characters)
tests/integration/test_integration.py:457:80: E501 line too long (87 > 79 characters)
tests/integration/test_integration.py:480:80: E501 line too long (82 > 79 characters)
tests/integration/test_integration.py:485:80: E501 line too long (82 > 79 characters)
tests/integration/test_integration.py:494:80: E501 line too long (87 > 79 characters)
tests/integration/test_integration.py:552:80: E501 line too long (86 > 79 characters)
tests/integration/test_integration.py:652:80: E501 line too long (80 > 79 characters)
tests/integration/test_integration.py:690:80: E501 line too long (88 > 79 characters)
tests/integration/test_integration.py:711:80: E501 line too long (82 > 79 characters)
tests/integration/test_integration.py:744:80: E501 line too long (88 > 79 characters)
tests/integration/test_integration.py:794:80: E501 line too long (88 > 79 characters)
tests/test_secrets.py:4:80: E501 line too long (82 > 79 characters)
tests/test_secrets.py:21:80: E501 line too long (90 > 79 characters)
tests/test_secrets.py:53:80: E501 line too long (81 > 79 characters)
tests/test_secrets.py:57:80: E501 line too long (84 > 79 characters)
tests/test_utils.py:20:80: E501 line too long (80 > 79 characters)
tests/test_utils.py:52:80: E501 line too long (83 > 79 characters)
tests/test_utils.py:121:80: E501 line too long (81 > 79 characters)
tests/test_utils.py:187:80: E501 line too long (80 > 79 characters)
tests/unit/test_aws_framework.py:29:80: E501 line too long (85 > 79 characters)
tests/unit/test_aws_framework.py:43:80: E501 line too long (81 > 79 characters)
tests/unit/test_aws_framework.py:80:80: E501 line too long (81 > 79 characters)
tests/unit/test_aws_framework.py:92:80: E501 line too long (81 > 79 characters)
tests/unit/test_aws_framework.py:105:80: E501 line too long (81 > 79 characters)
tests/unit/test_aws_framework.py:131:80: E501 line too long (80 > 79 characters)
tests/unit/test_aws_framework.py:133:80: E501 line too long (84 > 79 characters)
tests/unit/test_aws_framework.py:137:80: E501 line too long (81 > 79 characters)
tests/unit/test_aws_framework.py:153:80: E501 line too long (84 > 79 characters)
tests/unit/test_aws_resource_manager.py:4:80: E501 line too long (85 > 79 characters)
tests/unit/test_aws_resource_manager.py:31:80: E501 line too long (82 > 79 characters)
tests/unit/test_aws_resource_manager.py:69:80: E501 line too long (86 > 79 characters)
tests/unit/test_aws_resource_manager.py:89:80: E501 line too long (85 > 79 characters)
tests/unit/test_aws_resource_manager.py:100:80: E501 line too long (87 > 79 characters)
tests/unit/test_aws_resource_manager.py:115:80: E501 line too long (80 > 79 characters)
tests/unit/test_aws_resource_manager.py:124:80: E501 line too long (86 > 79 characters)
tests/unit/test_cli_commands.py:26:80: E501 line too long (83 > 79 characters)
tests/unit/test_cli_commands.py:72:80: E501 line too long (81 > 79 characters)
tests/unit/test_cli_commands.py:161:80: E501 line too long (86 > 79 characters)
tests/unit/test_cli_commands.py:177:80: E501 line too long (87 > 79 characters)
tests/unit/test_cli_commands.py:179:80: E501 line too long (80 > 79 characters)
tests/unit/test_cli_commands.py:188:80: E501 line too long (81 > 79 characters)
tests/unit/test_cli_commands.py:272:80: E501 line too long (88 > 79 characters)
tests/unit/test_cli_commands.py:310:80: E501 line too long (84 > 79 characters)
tests/unit/test_cli_commands.py:331:80: E501 line too long (88 > 79 characters)
tests/unit/test_cli_commands.py:332:80: E501 line too long (80 > 79 characters)
tests/unit/test_cli_commands.py:335:80: E501 line too long (82 > 79 characters)
tests/unit/test_cli_commands.py:353:80: E501 line too long (83 > 79 characters)
tests/unit/test_cli_commands.py:358:80: E501 line too long (81 > 79 characters)
tests/unit/test_cli_commands.py:403:80: E501 line too long (86 > 79 characters)
tests/unit/test_cloudflare_framework.py:14:80: E501 line too long (84 > 79 characters)
tests/unit/test_cloudflare_framework.py:182:80: E501 line too long (86 > 79 characters)
tests/unit/test_cloudflare_framework.py:187:80: E501 line too long (83 > 79 characters)
tests/unit/test_cloudflare_framework.py:215:80: E501 line too long (87 > 79 characters)
tests/unit/test_cloudflare_manager.py:47:80: E501 line too long (88 > 79 characters)
tests/unit/test_cloudflare_manager.py:78:80: E501 line too long (88 > 79 characters)
tests/unit/test_cloudflare_manager.py:106:80: E501 line too long (88 > 79 characters)
tests/unit/test_cloudflare_specs.py:24:80: E501 line too long (86 > 79 characters)
tests/unit/test_cloudflare_specs.py:166:80: E501 line too long (87 > 79 characters)
tests/unit/test_config.py:60:80: E501 line too long (88 > 79 characters)
tests/unit/test_config.py:65:80: E501 line too long (88 > 79 characters)
tests/unit/test_config.py:101:80: E501 line too long (83 > 79 characters)
tests/unit/test_config.py:113:80: E501 line too long (83 > 79 characters)
tests/unit/test_config.py:118:80: E501 line too long (83 > 79 characters)
tests/unit/test_config.py:128:80: E501 line too long (83 > 79 characters)
tests/unit/test_config.py:132:80: E501 line too long (83 > 79 characters)
tests/unit/test_config.py:170:80: E501 line too long (83 > 79 characters)
tests/unit/test_config.py:182:80: E501 line too long (83 > 79 characters)
tests/unit/test_config.py:201:80: E501 line too long (84 > 79 characters)
tests/unit/test_config.py:222:80: E501 line too long (87 > 79 characters)
tests/unit/test_config.py:225:80: E501 line too long (84 > 79 characters)
tests/unit/test_config.py:332:80: E501 line too long (85 > 79 characters)
tests/unit/test_config.py:340:80: E501 line too long (82 > 79 characters)
tests/unit/test_config.py:354:80: E501 line too long (80 > 79 characters)
tests/unit/test_config.py:376:80: E501 line too long (83 > 79 characters)
tests/unit/test_config.py:378:80: E501 line too long (81 > 79 characters)
tests/unit/test_config.py:380:80: E501 line too long (80 > 79 characters)
tests/unit/test_config.py:392:80: E501 line too long (82 > 79 characters)
tests/unit/test_config.py:395:80: E501 line too long (83 > 79 characters)
tests/unit/test_config.py:409:80: E501 line too long (80 > 79 characters)
tests/unit/test_config.py:435:80: E501 line too long (81 > 79 characters)
tests/unit/test_config.py:468:80: E501 line too long (87 > 79 characters)
tests/unit/test_config.py:474:80: E501 line too long (84 > 79 characters)
tests/unit/test_config.py:486:80: E501 line too long (82 > 79 characters)
tests/unit/test_deployment.py:42:80: E501 line too long (83 > 79 characters)
tests/unit/test_deployment.py:101:80: E501 line too long (87 > 79 characters)
tests/unit/test_deployment.py:141:80: E501 line too long (80 > 79 characters)
tests/unit/test_deployment.py:159:80: E501 line too long (83 > 79 characters)
tests/unit/test_deployment.py:194:80: E501 line too long (82 > 79 characters)
tests/unit/test_deployment.py:207:80: E501 line too long (98 > 79 characters)
tests/unit/test_deployment.py:233:80: E501 line too long (80 > 79 characters)
tests/unit/test_deployment.py:234:80: E501 line too long (85 > 79 characters)
tests/unit/test_deployment.py:236:80: E501 line too long (88 > 79 characters)
tests/unit/test_deployment.py:257:80: E501 line too long (80 > 79 characters)
tests/unit/test_deployment.py:267:80: E501 line too long (87 > 79 characters)
tests/unit/test_deployment.py:291:80: E501 line too long (82 > 79 characters)
tests/unit/test_deployment.py:330:80: E501 line too long (80 > 79 characters)
tests/unit/test_deployment.py:338:80: E501 line too long (83 > 79 characters)
tests/unit/test_deployment.py:417:80: E501 line too long (85 > 79 characters)
tests/unit/test_deployment.py:468:80: E501 line too long (84 > 79 characters)
tests/unit/test_deployment.py:476:80: E501 line too long (88 > 79 characters)
tests/unit/test_deployment.py:490:80: E501 line too long (80 > 79 characters)
tests/unit/test_deployment.py:799:80: E501 line too long (83 > 79 characters)
tests/unit/test_deployment.py:824:80: E501 line too long (85 > 79 characters)
tests/unit/test_deployment.py:830:80: E501 line too long (85 > 79 characters)
tests/unit/test_deployment.py:835:80: E501 line too long (83 > 79 characters)
tests/unit/test_deployment.py:845:80: E501 line too long (80 > 79 characters)
tests/unit/test_deployment.py:864:80: E501 line too long (85 > 79 characters)
tests/unit/test_deployment.py:875:80: E501 line too long (83 > 79 characters)
tests/unit/test_lambda_security_validator.py:36:80: E501 line too long (86 > 79 characters)
tests/unit/test_lambda_security_validator.py:39:80: E501 line too long (83 > 79 characters)
tests/unit/test_lambda_security_validator.py:78:80: E501 line too long (83 > 79 characters)
tests/unit/test_lambda_security_validator.py:88:80: E501 line too long (85 > 79 characters)
tests/unit/test_lambda_security_validator.py:92:80: E501 line too long (85 > 79 characters)
tests/unit/test_lambda_security_validator.py:100:80: E501 line too long (85 > 79 characters)
tests/unit/test_lambda_security_validator.py:122:80: E501 line too long (80 > 79 characters)
tests/unit/test_lambda_security_validator.py:125:80: E501 line too long (86 > 79 characters)
tests/unit/test_lambda_security_validator.py:143:80: E501 line too long (82 > 79 characters)


============================================================


============================================================
TOOL: Pylint
RETURN CODE: 30
============================================================

STDOUT:
----------------------------------------
************* Module ha_connector.web
src/ha_connector/web/__init__.py:12:0: E0401: Unable to import 'fastapi' (import-error)
src/ha_connector/web/__init__.py:13:0: E0401: Unable to import 'fastapi.responses' (import-error)
src/ha_connector/web/__init__.py:14:0: E0401: Unable to import 'fastapi.staticfiles' (import-error)
src/ha_connector/web/__init__.py:15:0: E0401: Unable to import 'fastapi.templating' (import-error)
src/ha_connector/web/__init__.py:31:4: W0621: Redefining name 'app' from outer scope (line 56) (redefined-outer-name)
************* Module ha_connector.web.api.setup
src/ha_connector/web/api/setup.py:73:5: W0511: TODO: Implement AWS credential validation and storage (fixme)
src/ha_connector/web/api/setup.py:82:5: W0511: TODO: Implement Home Assistant connection validation (fixme)
src/ha_connector/web/api/setup.py:89:5: W0511: TODO: Implement comprehensive validation (fixme)
src/ha_connector/web/api/setup.py:103:5: W0511: TODO: Implement setup completion logic (fixme)
src/ha_connector/web/api/setup.py:5:0: E0401: Unable to import 'fastapi' (import-error)
************* Module ha_connector.web.api.status
src/ha_connector/web/api/status.py:5:0: E0401: Unable to import 'fastapi' (import-error)
************* Module ha_connector.web.api.integrations
src/ha_connector/web/api/integrations.py:65:5: W0511: TODO: Implement actual configuration logic (fixme)
src/ha_connector/web/api/integrations.py:72:5: W0511: TODO: Implement actual enable logic (fixme)
src/ha_connector/web/api/integrations.py:79:5: W0511: TODO: Implement actual disable logic (fixme)
src/ha_connector/web/api/integrations.py:3:0: E0401: Unable to import 'fastapi' (import-error)
************* Module ha_connector.config.manager
src/ha_connector/config/manager.py:8:0: C0302: Too many lines in module (1075/1000) (too-many-lines)
************* Module ha_connector.security.lambda_validator
src/ha_connector/security/lambda_validator.py:8:0: C0302: Too many lines in module (1158/1000) (too-many-lines)
************* Module tests.fixtures.aws_fixtures
tests/fixtures/aws_fixtures.py:10:0: E0401: Unable to import 'moto' (import-error)
************* Module scripts.run_web_dev
scripts/run_web_dev.py:9:0: C0103: Constant name "src_path" doesn't conform to UPPER_CASE naming style (invalid-name)
scripts/run_web_dev.py:14:4: E0401: Unable to import 'uvicorn' (import-error)
************* Module scripts.deploy_shared_config
scripts/deploy_shared_config.py:46:0: C0302: Too many lines in module (1248/1000) (too-many-lines)
scripts/deploy_shared_config.py:167:4: R0914: Too many local variables (16/15) (too-many-locals)
scripts/deploy_shared_config.py:192:12: W0612: Unused variable 'stripped' (unused-variable)
scripts/deploy_shared_config.py:232:12: R1724: Unnecessary "elif" after "continue", remove the leading "el" from "elif" (no-else-continue)
scripts/deploy_shared_config.py:259:8: W0612: Unused variable 'in_imports' (unused-variable)
************* Module scripts.validate_lambda_markers
scripts/validate_lambda_markers.py:34:11: W0718: Catching too general exception Exception (broad-exception-caught)
scripts/validate_lambda_markers.py:23:0: R0912: Too many branches (13/12) (too-many-branches)
scripts/validate_lambda_markers.py:108:11: W0718: Catching too general exception Exception (broad-exception-caught)
scripts/validate_lambda_markers.py:119:8: R1724: Unnecessary "elif" after "continue", remove the leading "el" from "elif" (no-else-continue)
scripts/validate_lambda_markers.py:135:8: R1724: Unnecessary "elif" after "continue", remove the leading "el" from "elif" (no-else-continue)
scripts/validate_lambda_markers.py:217:4: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
scripts/validate_lambda_markers.py:219:0: W1404: Implicit string concatenation found in call (implicit-str-concat)
scripts/validate_lambda_markers.py:203:24: W0612: Unused variable 'i' (unused-variable)
scripts/validate_lambda_markers.py:228:4: C0103: Constant name "success" doesn't conform to UPPER_CASE naming style (invalid-name)
scripts/validate_lambda_markers.py:229:4: R1722: Consider using 'sys.exit' instead (consider-using-sys-exit)
************* Module scripts.run_web_server
scripts/run_web_server.py:1:0: R0801: Similar lines in 2 files
==ha_connector.deployment.integration_installer:[253:462]
==ha_connector.deployment.service_installer:[140:350]
        src_path = Path(source_path)
        if not src_path.exists():
            raise ValidationError(f"Source path does not exist: {src_path}")

        # Determine output path
        if output_path is None:
            output_path = f"/tmp/{src_path.stem}-deployment.zip"  # nosec B108
        out_path = Path(output_path)

        if self.dry_run:
            self.logger.info(f"[DRY RUN] Would create deployment package: {out_path}")
            return str(out_path)

        self.logger.info(f"Creating deployment package: {out_path}")

        with zipfile.ZipFile(str(out_path), "w", zipfile.ZIP_DEFLATED) as zip_file:
            if src_path.is_file():
                # Single file
                zip_file.write(str(src_path), src_path.name)
            elif src_path.is_dir():
                # Directory - add all Python files
                for py_file in src_path.rglob("*.py"):
                    arc_name = py_file.relative_to(src_path)
                    zip_file.write(str(py_file), str(arc_name))

                # Add requirements if they exist
                if include_dependencies:
                    requirements_file = src_path / "requirements.txt"
                    if requirements_file.exists():
                        # This is a simplified approach - in practice you'd want to
                        # install dependencies into the package
                        self.logger.warning(
                            "Requirements.txt found but dependency "
                            "installation not implemented"
                        )

            # Add common utilities if they exist
            utils_path = Path(__file__).parent.parent / "utils.py"
            if utils_path.exists():
                zip_file.write(str(utils_path), "ha_connector_utils.py")

        self.logger.info(f"Created deployment package: {out_path}")
        return str(out_path)

    def create_iam_role(
        self,
        role_name: str,
        service_type: ServiceType,
    ) -> str:
        """Create IAM role for Lambda function"""
        if self.dry_run:
            self.logger.info(f"[DRY RUN] Would create IAM role: {role_name}")
            return f"arn:aws:iam::123456789012:role/{role_name}"

        # Basic Lambda execution role policy
        assume_role_policy: dict[str, Any] = LAMBDA_ASSUME_ROLE_POLICY

        # Service-specific policies would go here
        role_spec: dict[str, Any] = {
            "resource_type": "role",
            "name": role_name,
            "assume_role_policy": assume_role_policy,
            "description": f"Lambda execution role for {service_type} service",
        }

        self.logger.info(f"Creating IAM role: {role_name}")
        result = self.aws_manager.create_resource(AWSResourceType.IAM, role_spec)

        if result.status == "error":
            raise AWSError(f"Failed to create IAM role: {', '.join(result.errors)}")

        # Extract ARN from result
        if result.resource and "Role" in result.resource:
            role_arn = str(result.resource["Role"]["Arn"])
            self.logger.info(f"Created IAM role: {role_arn}")
            return role_arn

        raise AWSError("Failed to get IAM role ARN from AWS response")

    def deploy_service(self, config: ServiceConfig) -> DeploymentResult:
        """Deploy a service to AWS Lambda"""
        self.logger.info(
            f"Starting deployment of {config.service_type} service: "
            f"{config.function_name}"
        )

        result = DeploymentResult(
            success=False,
            function_name=config.function_name,
            function_arn=None,
            function_url=None,
            role_arn=None,
        )

        try:
            # Create IAM role if not provided
            role_arn = config.role_arn
            if not role_arn:
                role_name = f"{config.function_name}-execution-role"
                role_arn = self.create_iam_role(role_name, config.service_type)
                result.role_arn = role_arn

            # Create deployment package
            package_path = self.create_deployment_package(config.source_path)

            # Create Lambda function specification
            lambda_spec = LambdaResourceSpec(
                function_name=config.function_name,
                handler=config.handler,
                role_arn=role_arn,
                package_path=package_path,
                runtime=config.runtime,
                timeout=config.timeout,
                memory_size=config.memory_size,
                description=config.description,
                environment_variables=config.environment_variables,
                create_url=config.create_url,
                url_auth_type=config.url_auth_type,
            )

            # Deploy to AWS
            if self.dry_run:
                self.logger.info(
                    f"[DRY RUN] Would deploy Lambda function: {config.function_name}"
                )
                result.success = True
                result.function_arn = (
                    f"arn:aws:lambda:{self.region}:123456789012:function:"
                    f"{config.function_name}"
                )
                result.metadata = {
                    "message": f"Would deploy Lambda function: {config.function_name}"
                }
                if config.create_url:
                    result.function_url = (
                        f"https://example.lambda-url.{self.region}.on.aws/"
                    )
            else:
                deploy_result = self.aws_manager.create_resource(
                    AWSResourceType.LAMBDA,
                    lambda_spec.model_dump(),
                )

                if deploy_result.status in ["created", "updated"]:
                    result.success = True

                    # Extract function details from AWS response
                    if deploy_result.resource:
                        function_config = deploy_result.resource.get(
                            "Configuration", {}
                        )
                        result.function_arn = function_config.get("FunctionArn")

                        # Extract function URL if created
                        function_url_config = function_config.get("FunctionUrl")
                        if function_url_config and "FunctionUrl" in function_url_config:
                            result.function_url = function_url_config["FunctionUrl"]

                    self.logger.success(f"Successfully deployed {config.function_name}")
                else:
                    result.errors = deploy_result.errors
                    self.logger.error(
                        f"Failed to deploy {config.function_name}: "
                        f"{', '.join(deploy_result.errors)}"
                    )

            # Clean up temporary package
            if os.path.exists(package_path) and not self.dry_run:
                os.unlink(package_path)

        except (ValidationError, AWSError, OSError, zipfile.BadZipFile) as e:
            result.errors.append(str(e))
            self.logger.error(f"Deployment failed: {str(e)}")

        return result

    def deploy_predefined_service(
        self,
        service_type: ServiceType,
        overrides: dict[str, Any] | None = None,
    ) -> DeploymentResult:
        """Deploy a predefined service type with optional overrides"""
        # Get default configuration
        default_config = self.get_default_config(service_type)
        if not default_config:
            raise ValidationError(
                f"No default configuration for service type: {service_type}"
            )

        # Apply overrides
        config_dict = {**default_config}
        if overrides:
            config_dict.update(overrides)

        config_dict["service_type"] = service_type

        # Create service config
        config = ServiceConfig(**config_dict)

        return self.deploy_service(config)

    def list_deployed_services(self) -> list[dict[str, Any]]:
        """List all deployed Lambda functions with enhanced service mapping"""
        if self.dry_run:
            self.logger.info("[DRY RUN] Would list deployed services")
            return []

        self.logger.info("Listing deployed services...")
 (duplicate-code)
scripts/run_web_server.py:1:0: R0801: Similar lines in 2 files
==ha_connector.deployment.integration_installer:[507:684]
==ha_connector.deployment.service_installer:[350:526]
            return []

    def plan_enhanced_installation(
        self, scenario: InstallationScenario
    ) -> dict[str, Any]:
        """Plan installation using Configuration Manager resource discovery"""
        self.logger.info(
            f"Planning enhanced installation for scenario: {scenario.value}"
        )

        # Initialize configuration for the scenario
        self.config_manager.init_config(scenario)

        # Define resource requirements based on scenario
        requirements: list[ResourceRequirement] = []

        if scenario in [InstallationScenario.DIRECT_ALEXA, InstallationScenario.ALL]:
            requirements.append(
                ResourceRequirement(
                    resource_type="lambda",
                    resource_id="ha-alexa-proxy",
                    description="Home Assistant Alexa Skills Proxy",
                )
            )

        if scenario in [InstallationScenario.CLOUDFLARE_IOS, InstallationScenario.ALL]:
            requirements.append(
                ResourceRequirement(
                    resource_type="lambda",
                    resource_id="ha-ios-proxy",
                    description="Home Assistant iOS Companion Proxy",
                )
            )

        # Use Configuration Manager for resource matching
        matched_resources = self.config_manager.match_resources_to_requirements(
            requirements
        )

        # Analyze conflicts and plan installation steps
        conflicts: list[dict[str, Any]] = []
        installation_steps: list[dict[str, Any]] = []
        user_decisions_needed: list[dict[str, Any]] = []

        # Check for conflicts and required user decisions
        for match in matched_resources:
            if match.exists:
                conflicts.append(
                    {
                        "resource": match.resource_id,
                        "issue": "Existing resource found",
                        "resource_type": match.resource_type,
                    }
                )
                user_decisions_needed.append(
                    {
                        "type": "conflict_resolution",
                        "message": (
                            f"Resource {match.resource_id} already exists. "
                            "Replace or update?"
                        ),
                        "options": ["replace", "update", "skip"],
                    }
                )

        # Plan installation steps for missing resources
        missing_requirements = [
            req
            for req in requirements
            if not any(
                match.resource_id == req.resource_id and match.exists
                for match in matched_resources
            )
        ]

        for requirement in missing_requirements:
            installation_steps.append(
                {
                    "action": "create",
                    "resource_type": requirement.resource_type,
                    "resource_id": requirement.resource_id,
                    "service_type": self._get_service_type_for_lambda(
                        requirement.resource_id
                    ),
                }
            )

        installation_plan = {
            "scenario": scenario.value,
            "region": self.region,
            "requirements": len(requirements),
            "matched_resources": len(matched_resources),
            "conflicts": conflicts,
            "installation_steps": installation_steps,
            "user_decisions_needed": user_decisions_needed,
        }

        plan_steps = len(installation_steps)
        self.logger.info(f"Installation plan created with {plan_steps} steps")
        return installation_plan

    def execute_enhanced_installation(
        self,
        installation_plan: dict[str, Any],
        user_choices: dict[str, str] | None = None,
    ) -> DeploymentResult:
        """Execute installation plan with user interaction handling"""
        self.logger.info("Executing enhanced installation plan...")

        user_choices = user_choices or {}
        results = DeploymentResult(
            success=True,
            function_name="enhanced-installation-batch",
            function_arn=None,
            function_url=None,
            role_arn=None,
        )

        # Handle user decisions for conflicts
        for decision in installation_plan.get("user_decisions_needed", []):
            resource_key = f"conflict_{decision.get('message', '').split()[1]}"
            user_choice = user_choices.get(resource_key, "skip")

            if user_choice == "skip":
                results.warnings.append(
                    "Skipped conflicted resource due to user choice"
                )
                continue
            if user_choice == "replace":
                results.warnings.append("Will replace existing resource")
            if user_choice == "update":
                results.warnings.append("Will update existing resource")

        # Execute installation steps
        for step in installation_plan.get("installation_steps", []):
            if step["action"] == "create":
                service_type = step["service_type"]
                resource_id = step["resource_id"]

                try:
                    # Deploy the service using existing methods
                    deploy_result = self.deploy_predefined_service(service_type)

                    if deploy_result.success:
                        results.metadata[f"deployed_{resource_id}"] = True
                        self.logger.success(f"Successfully deployed {resource_id}")
                    else:
                        results.errors.extend(deploy_result.errors)
                        results.warnings.extend(deploy_result.warnings)
                        results.success = False

                except (ValidationError, AWSError, OSError, KeyError) as e:
                    error_msg = f"Failed to deploy {resource_id}: {str(e)}"
                    results.errors.append(error_msg)
                    results.success = False
                    self.logger.error(error_msg)

        # Store summary in metadata
        if results.success:
            deployed_count = len(
                [k for k in results.metadata if k.startswith("deployed_")]
            )
            results.metadata["summary"] = (
                f"Enhanced installation completed successfully. "
                f"Deployed {deployed_count} services."
            )
        else:
            error_count = len(results.errors)
            results.metadata["summary"] = (
                f"Enhanced installation completed with {error_count} errors"
            )

        return results

    def _get_service_type_for_lambda(self, lambda_name: str) -> ServiceType:
        """Map Lambda function name to ServiceType (supports both naming systems)"""
        # First try to find by exact function name match (new clean naming) (duplicate-code)
scripts/run_web_server.py:1:0: R0801: Similar lines in 2 files
==ha_connector.deployment.integration_installer:[33:97]
==ha_connector.deployment.service_installer:[31:93]
    IOS_COMPANION = "ios_companion"
    CLOUDFLARE_PROXY = "cloudflare_proxy"
    GENERIC = "generic"


class ServiceConfig(BaseModel):
    """Configuration for a service deployment"""

    service_type: ServiceType = Field(..., description="Type of service to deploy")
    function_name: str = Field(..., description="Lambda function name")
    handler: str = Field(..., description="Lambda handler function")
    source_path: str = Field(..., description="Path to source code")
    runtime: str = Field(default="python3.11", description="Lambda runtime")
    timeout: int = Field(default=30, description="Function timeout in seconds")
    memory_size: int = Field(default=512, description="Memory size in MB")
    description: str | None = Field(default=None, description="Function description")
    environment_variables: dict[str, str] | None = Field(
        default=None, description="Environment variables"
    )
    create_url: bool = Field(
        default=False, description="Whether to create function URL"
    )
    url_auth_type: str = Field(default="NONE", description="Function URL auth type")
    role_arn: str | None = Field(
        default=None, description="IAM role ARN (will be created if not provided)"
    )


class DeploymentResult(BaseModel):
    """Result of a service deployment"""

    success: bool = Field(..., description="Whether deployment was successful")
    function_name: str = Field(..., description="Deployed function name")
    function_arn: str | None = Field(None, description="Function ARN")
    function_url: str | None = Field(None, description="Function URL if created")
    role_arn: str | None = Field(None, description="IAM role ARN used")
    errors: list[str] = Field(default_factory=list, description="Deployment errors")
    warnings: list[str] = Field(default_factory=list, description="Deployment warnings")
    metadata: dict[str, Any] = Field(
        default_factory=dict,
        description="Additional metadata",
    )


class ServiceInstaller:
    """Enhanced service installer with resource discovery and conflict resolution"""

    def __init__(
        self, region: str = "us-east-1", dry_run: bool = False, verbose: bool = False
    ):
        self.region = region
        self.dry_run = dry_run
        self.verbose = verbose
        self.logger = HAConnectorLogger("service_installer", verbose=verbose)
        self.aws_manager = AWSResourceManager(region)

        # Initialize Configuration Manager for enhanced resource discovery
        self.config_manager = ConfigurationManager()

        # Enhanced service configurations with dual naming system
        # Maps ServiceType to both human-friendly names and technical IDs
        self._default_configs: dict[ServiceType, dict[str, Any]] = {
            ServiceType.ALEXA: {
                # Clean naming convention (duplicate-code)
scripts/run_web_server.py:1:0: R0801: Similar lines in 2 files
==ha_connector.deployment.integration_installer:[735:772]
==ha_connector.deployment.service_installer:[532:569]
        return ServiceType.ALEXA  # Default fallback

    def remove_service(self, function_name: str) -> bool:
        """Remove a deployed service"""
        if self.dry_run:
            self.logger.info(f"[DRY RUN] Would remove service: {function_name}")
            return True

        self.logger.info(f"Removing service: {function_name}")
        result = self.aws_manager.delete_resource(AWSResourceType.LAMBDA, function_name)

        if result.status == "error":
            self.logger.error(f"Failed to remove service: {', '.join(result.errors)}")
            return False

        self.logger.success(f"Successfully removed service: {function_name}")
        return True


# Module-level singleton registry for ServiceInstaller instances
_service_installer_registry: dict[tuple[str, bool, bool], ServiceInstaller] = {}


def get_service_installer(
    region: str = "us-east-1",
    dry_run: bool = False,
    verbose: bool = False,
) -> ServiceInstaller:
    """Get or create singleton service installer instance"""
    key = (region, dry_run, verbose)

    if key not in _service_installer_registry:
        _service_installer_registry[key] = ServiceInstaller(
            region=region, dry_run=dry_run, verbose=verbose
        )

    return _service_installer_registry[key] (duplicate-code)
scripts/run_web_server.py:1:0: R0801: Similar lines in 2 files
==ha_connector.__init__:[100:109]
==ha_connector.constants:[22:31]
    "ServiceInstaller",
    "ServiceType",
    "ServiceConfig",
    "DeploymentResult",
    "DeploymentManager",
    "DeploymentStrategy",
    "DeploymentConfig",
    "orchestrate_deployment",
] (duplicate-code)
scripts/run_web_server.py:1:0: R0801: Similar lines in 2 files
==ha_connector.security.lambda_validator:[220:225]
==ha_connector.security.policy_validator:[129:134]
            return [
                SecurityCheckResult(
                    check=check,
                    status=SecurityStatus.WARNING,
                    message=( (duplicate-code)
scripts/run_web_server.py:1:0: R0801: Similar lines in 2 files
==ha_connector.security.lambda_validator:[418:423]
==ha_connector.security.policy_validator:[67:72]
        if issues:
            return [
                SecurityCheckResult(
                    check=check,
                    status=SecurityStatus.FAIL, (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 9.88/10 (previous run: 9.88/10, +0.00)



============================================================


============================================================
TOOL: Mypy
RETURN CODE: 1
============================================================

STDOUT:
----------------------------------------
scripts/run_web_dev.py:14: error: Cannot find implementation or library stub for module named "uvicorn"  [import-not-found]
src/ha_connector/automation/validation.py:43: error: Function is missing a return type annotation  [no-untyped-def]
src/ha_connector/automation/validation.py:43: note: Use "-> None" if function does not return a value
src/ha_connector/automation/matching.py:45: error: Function is missing a return type annotation  [no-untyped-def]
src/ha_connector/automation/matching.py:45: note: Use "-> None" if function does not return a value
src/ha_connector/automation/execution.py:44: error: Function is missing a return type annotation  [no-untyped-def]
src/ha_connector/automation/execution.py:44: note: Use "-> None" if function does not return a value
src/ha_connector/automation/decision_engine.py:45: error: Function is missing a return type annotation  [no-untyped-def]
src/ha_connector/automation/decision_engine.py:45: note: Use "-> None" if function does not return a value
src/ha_connector/automation/compatibility.py:43: error: Function is missing a return type annotation  [no-untyped-def]
src/ha_connector/automation/compatibility.py:43: note: Use "-> None" if function does not return a value
src/ha_connector/web/api/status.py:5: error: Cannot find implementation or library stub for module named "fastapi"  [import-not-found]
src/ha_connector/web/api/status.py:31: error: Untyped decorator makes function "get_system_status" untyped  [misc]
src/ha_connector/web/api/status.py:43: error: Untyped decorator makes function "get_health_status" untyped  [misc]
src/ha_connector/web/api/status.py:69: error: Untyped decorator makes function "get_recent_logs" untyped  [misc]
src/ha_connector/web/api/setup.py:5: error: Cannot find implementation or library stub for module named "fastapi"  [import-not-found]
src/ha_connector/web/api/setup.py:37: error: Untyped decorator makes function "get_setup_steps" untyped  [misc]
src/ha_connector/web/api/setup.py:68: error: Untyped decorator makes function "configure_aws" untyped  [misc]
src/ha_connector/web/api/setup.py:77: error: Untyped decorator makes function "configure_homeassistant" untyped  [misc]
src/ha_connector/web/api/setup.py:86: error: Untyped decorator makes function "validate_setup" untyped  [misc]
src/ha_connector/web/api/setup.py:100: error: Untyped decorator makes function "complete_setup" untyped  [misc]
src/ha_connector/web/api/integrations.py:3: error: Cannot find implementation or library stub for module named "fastapi"  [import-not-found]
src/ha_connector/web/api/integrations.py:27: error: Untyped decorator makes function "list_integrations" untyped  [misc]
src/ha_connector/web/api/integrations.py:41: error: Untyped decorator makes function "get_integration" untyped  [misc]
src/ha_connector/web/api/integrations.py:59: error: Untyped decorator makes function "configure_integration" untyped  [misc]
src/ha_connector/web/api/integrations.py:69: error: Untyped decorator makes function "enable_integration" untyped  [misc]
src/ha_connector/web/api/integrations.py:76: error: Untyped decorator makes function "disable_integration" untyped  [misc]
src/ha_connector/web/__init__.py:12: error: Cannot find implementation or library stub for module named "fastapi"  [import-not-found]
src/ha_connector/web/__init__.py:13: error: Cannot find implementation or library stub for module named "fastapi.responses"  [import-not-found]
src/ha_connector/web/__init__.py:14: error: Cannot find implementation or library stub for module named "fastapi.staticfiles"  [import-not-found]
src/ha_connector/web/__init__.py:15: error: Cannot find implementation or library stub for module named "fastapi.templating"  [import-not-found]
src/ha_connector/web/__init__.py:59: error: Untyped decorator makes function "root" untyped  [misc]
src/ha_connector/web/__init__.py:65: error: Untyped decorator makes function "dashboard" untyped  [misc]
src/ha_connector/web/__init__.py:71: error: Untyped decorator makes function "integrations_page" untyped  [misc]
src/ha_connector/web/__init__.py:77: error: Untyped decorator makes function "setup_page" untyped  [misc]
src/ha_connector/web/__init__.py:83: error: Untyped decorator makes function "health_check" untyped  [misc]
tests/fixtures/aws_fixtures.py:10: error: Cannot find implementation or library stub for module named "moto"  [import-not-found]
tests/fixtures/aws_fixtures.py:14: error: Cannot find implementation or library stub for module named "types_boto3_iam.client"  [import-not-found]
tests/fixtures/aws_fixtures.py:15: error: Cannot find implementation or library stub for module named "types_boto3_lambda.client"  [import-not-found]
tests/fixtures/aws_fixtures.py:16: error: Cannot find implementation or library stub for module named "types_boto3_ssm.client"  [import-not-found]
src/ha_connector/security/lambda_validator.py:17: error: Cannot find implementation or library stub for module named "types_boto3_iam.client"  [import-not-found]
src/ha_connector/security/lambda_validator.py:18: error: Cannot find implementation or library stub for module named "types_boto3_lambda.client"  [import-not-found]
src/ha_connector/platforms/aws/resource_manager.py:23: error: Cannot find implementation or library stub for module named "types_boto3_iam.client"  [import-not-found]
src/ha_connector/platforms/aws/resource_manager.py:24: error: Cannot find implementation or library stub for module named "types_boto3_sts.client"  [import-not-found]
src/ha_connector/integrations/alexa/skill_automation_manager.py:55: error: Cannot find implementation or library stub for module named "types_boto3_lambda.client"  [import-not-found]
src/ha_connector/integrations/alexa/skill_automation_manager.py:55: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1121: error: Incompatible return value type (got "object", expected "dict[str, Any]")  [return-value]
src/ha_connector/integrations/alexa/lambda_functions/shared_configuration.py:1168: error: Returning Any from function declared to return "dict[str, Any] | None"  [no-any-return]
src/ha_connector/integrations/alexa/lambda_functions/smart_home_bridge.py:393: error: Returning Any from function declared to return "dict[str, Any]"  [no-any-return]
src/ha_connector/integrations/alexa/lambda_functions/oauth_gateway.py:173: error: "Callable[[], Any]" has no attribute "client"  [attr-defined]
tests/unit/test_lambda_security_validator.py:14: error: Cannot find implementation or library stub for module named "moto"  [import-not-found]
tests/unit/test_lambda_security_validator.py:20: error: Cannot find implementation or library stub for module named "types_boto3_iam.client"  [import-not-found]
tests/unit/test_lambda_security_validator.py:21: error: Cannot find implementation or library stub for module named "types_boto3_lambda.client"  [import-not-found]
tests/unit/test_deployment.py:12: error: Cannot find implementation or library stub for module named "moto"  [import-not-found]
Found 48 errors in 19 files (checked 74 source files)


============================================================


============================================================
TOOL: Bandit
RETURN CODE: 0
============================================================

STDOUT:
----------------------------------------
Working... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:01
Run started:2025-07-31 03:52:24.473105

Test results:
	No issues identified.

Code scanned:
	Total lines of code: 16248
	Total lines skipped (#nosec): 0
	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 13

Run metrics:
	Total issues (by severity):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
	Total issues (by confidence):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
Files skipped (0):


STDERR:
----------------------------------------
[main]	INFO	profile include tests: None
[main]	INFO	profile exclude tests: None
[main]	INFO	cli include tests: None
[main]	INFO	cli exclude tests: None
[main]	INFO	using config: pyproject.toml
[main]	INFO	running on Python 3.12.3
[manager]	WARNING	Test in comment: subprocess is not a test name or id, ignoring
[manager]	WARNING	Test in comment: call is not a test name or id, ignoring
[manager]	WARNING	Test in comment: Safe is not a test name or id, ignoring
[manager]	WARNING	Test in comment: because is not a test name or id, ignoring
[manager]	WARNING	Test in comment: tool is not a test name or id, ignoring
[manager]	WARNING	Test in comment: is is not a test name or id, ignoring
[manager]	WARNING	Test in comment: from is not a test name or id, ignoring
[manager]	WARNING	Test in comment: a is not a test name or id, ignoring
[manager]	WARNING	Test in comment: hardcoded is not a test name or id, ignoring
[manager]	WARNING	Test in comment: Only is not a test name or id, ignoring
[manager]	WARNING	Test in comment: used is not a test name or id, ignoring
[manager]	WARNING	Test in comment: for is not a test name or id, ignoring
[manager]	WARNING	Test in comment: exception is not a test name or id, ignoring
[manager]	WARNING	Test in comment: types is not a test name or id, ignoring
[manager]	WARNING	Test in comment: with is not a test name or id, ignoring
[manager]	WARNING	Test in comment: safe_exec is not a test name or id, ignoring
[manager]	WARNING	Test in comment: wrapper is not a test name or id, ignoring
[tester]	WARNING	nosec encountered (B108), but no failed test on line 260
[tester]	WARNING	nosec encountered (B108), but no failed test on line 147
[tester]	WARNING	nosec encountered (B105), but no failed test on line 176
[tester]	WARNING	nosec encountered (B105), but no failed test on line 177
[manager]	WARNING	Test in comment: subprocess is not a test name or id, ignoring
[manager]	WARNING	Test in comment: call is not a test name or id, ignoring
[manager]	WARNING	Test in comment: with is not a test name or id, ignoring
[manager]	WARNING	Test in comment: validated is not a test name or id, ignoring
[manager]	WARNING	Test in comment: cmd is not a test name or id, ignoring
[manager]	WARNING	Test in comment: list is not a test name or id, ignoring
[tester]	WARNING	nosec encountered (B108), but no failed test on line 57


============================================================


============================================================
TOOL: Safety
RETURN CODE: 68
============================================================

STDERR:
----------------------------------------
/home/runner/.cache/pypoetry/virtualenvs/ha-external-connector-6nE7Bof3-py3.12/lib/python3.12/site-packages/safety/safety.py:594: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
  import pkg_resources
[31mCheck your network connection, unable to reach the server.[0m


============================================================


============================================================
TOOL: Pip-Audit
RETURN CODE: 0
============================================================

STDOUT:
----------------------------------------
Name                  Skip Reason
--------------------- ------------------------------------------------------------------------------------
ha-external-connector Dependency not found on PyPI and could not be audited: ha-external-connector (0.1.0)


STDERR:
----------------------------------------
No known vulnerabilities found


============================================================


================================================================================
END VERBOSE OUTPUT
================================================================================