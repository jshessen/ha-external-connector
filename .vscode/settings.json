{
    // Python interpreter and environment
    "python.defaultInterpreterPath": ".venv/bin/python",
    // Note: python.analysis.extraPaths is configured in pyproject.toml [tool.pyright] section

    // Type checking with Pylance (OPTIMIZED FOR LARGE WORKSPACES)
    // Note: python.analysis.typeCheckingMode is configured in pyproject.toml [tool.pyright] section
    "python.analysis.autoImportCompletions": true,
    // Note: python.analysis.autoSearchPaths is configured in pyproject.toml [tool.pyright] section
    "python.analysis.diagnosticMode": "openFilesOnly",  // CRITICAL: Changed from "workspace"
    "python.analysis.autoFormatOnType": false,  // Disabled to reduce processing

    // PERFORMANCE: Additional Pylance optimizations for large workspaces
    "python.analysis.indexing": true,  // Enable indexing for better performance
    "python.analysis.packageIndexDepths": [
        {"name": "", "depth": 2, "includeAllSymbols": false}
    ],

    // Note: python.analysis.exclude and python.analysis.ignore are configured in pyproject.toml [tool.pyright] section
    // This prevents VS Code warnings about settings that cannot be overridden when pyproject.toml exists

    // Linting configuration (DISABLED - Use modern extensions)
    "python.linting.enabled": false,  // CRITICAL: Disable duplicate linting
    "python.linting.lintOnSave": false,
    "python.linting.maxNumberOfProblems": 500,  // Reduced from 1000
    "python.linting.ignorePatterns": [
        ".venv/**/*.py",
        "**/migrations/**/*.py"
    ],

    // MyPy integration
    "python.linting.mypyEnabled": true,
    "python.linting.mypyPath": "/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/mypy",
    "python.linting.mypyArgs": [
        "--strict",
        "--show-error-codes",
        "--no-error-summary"
    ],

    // Flake8 integration (complementary to Ruff for plugin-specific rules)
    "python.linting.flake8Enabled": true,  // Enabled: Covers rules not yet in Ruff + plugins
    "python.linting.flake8Path": "/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/flake8",
    "python.linting.flake8Args": ["--max-line-length=88"],

    // Bandit security linting
    "python.linting.banditEnabled": true,
    "python.linting.banditPath": "/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/bandit",
    "python.linting.banditArgs": [
        "--configfile", "pyproject.toml",
        "-r"
    ],

    // Pylint integration (legacy Python extension settings)
    "python.linting.pylintEnabled": true,
    "python.linting.pylintPath": "/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/pylint",
    "python.linting.pylintArgs": [
        "--max-line-length=88",
        "--disable=C0114,C0116,R0903,R0913",
        "--load-plugins=pylint_pydantic"
    ],
    "python.linting.pylintCategorySeverity.convention": "Information",
    "python.linting.pylintCategorySeverity.refactor": "Warning",
    "python.linting.pylintCategorySeverity.warning": "Warning",
    "python.linting.pylintCategorySeverity.error": "Error",

    // Modern Pylint extension settings
    "pylint.interpreter": ["/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/python"],
    "pylint.path": ["/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/pylint"],
    "pylint.args": [
        "--max-line-length=88",
        "--disable=C0114,C0116,R0903,R0913",
        "--load-plugins=pylint_pydantic"
    ],
    "pylint.severity": {
        "convention": "Information",
        "refactor": "Information",  // Reduced from Warning to reduce noise
        "warning": "Warning",
        "error": "Error",
        "fatal": "Error"
    },

    // Python language server features
    "python.analysis.completeFunctionParens": true,
    // Note: python.analysis.include is configured in pyproject.toml [tool.pyright] section
    // Note: python.analysis.stubPath is configured in pyproject.toml [tool.pyright] section

    // Ruff configuration (modern native language server) - BALANCED
    "ruff.enable": true,
    "ruff.path": ["/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/ruff"],
    "ruff.organizeImports": true,
    "ruff.fixAll": true,  // Enabled for manual quick fixes - only auto-save disabled
    "ruff.showNotifications": "onError",
    "ruff.nativeServer": true,

    // Primary formatter: Black (via Black Formatter extension)
    "python.formatting.provider": "none",
    "[python]": {
        "editor.defaultFormatter": "ms-python.black-formatter",
        "editor.formatOnSave": true,
        "editor.formatOnType": false,
        "editor.formatOnPaste": false,  // Disabled to prevent conflicts
        "editor.codeActionsOnSave": {
            "source.organizeImports.ruff": "explicit"
            // Removed source.fixAll to prevent hanging
        }
    },

    // Black Formatter specific settings
    "black-formatter.path": ["/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/black"],
    "black-formatter.args": ["--line-length=88"],
    "black-formatter.showNotifications": "onError",
    "black-formatter.importStrategy": "fromEnvironment",

    // Enable code actions and quick fixes (BALANCED - manual enabled, auto-save conservative)
    "editor.codeActionsOnSave": {
        // Conservative auto-save: Only organize imports automatically
        "source.organizeImports.ruff": "explicit"
        // Manual fixes available via Command Palette and lightbulb
        // Use Ctrl+Shift+P -> "Format Document" for Black formatting
        // Use Ctrl+Shift+P -> "Ruff: Fix all auto-fixable problems" for Ruff fixes
    },

    // Enable code action providers (OPTIMIZED for performance)
    "editor.suggest.showMethods": true,
    "editor.suggest.showFunctions": true,
    "editor.codeActionsOnSaveTimeout": 5000,  // Increased from 1000ms to prevent hanging
    "python.analysis.fixAll": [
        "source.convertImportFormat",
        "source.unusedImports"  // Restored for manual quick fixes
    ],

    // Enable lightbulb (quick fix) on hover and focus
    "editor.lightbulb.enabled": "onCode",
    "editor.suggest.insertMode": "replace",
    "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": false
    },
    "editor.quickSuggestionsDelay": 100,  // Increased to reduce CPU load

    // Enable all code action kinds for lightbulb
    "editor.codeActionWidget.includeNearbyQuickFixes": true,
    "editor.codeActionWidget.showHeaders": true,

    // CRITICAL: Simplified formatting to prevent conflicts
    "editor.action.formatDocument.multiple": false,  // Disabled to prevent multiple formatter conflicts
    "editor.suggest.showKeywords": true,

    // Additional formatting controls - CONSERVATIVE
    "editor.formatOnType": false,
    "editor.formatOnPaste": false,  // Disabled to prevent save conflicts

    // Enhanced quick fix and code action settings
    "editor.suggest.showSnippets": true,
    "editor.suggest.showWords": true,
    "editor.acceptSuggestionOnCommitCharacter": true,
    "editor.acceptSuggestionOnEnter": "on",
    "editor.tabCompletion": "on",

    // Command palette improvements for quick tasks
    "workbench.commandPalette.history": 50,
    "workbench.quickOpen.closeOnFocusLost": false,

    // Problem matcher configuration
    "problems.showCurrentInStatus": true,
    "problems.sortOrder": "severity",

    // File associations and workspace settings
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        ".mypy_cache": true,
        ".pytest_cache": true,
        ".ruff_cache": true,
        "**/node_modules": true,
        "**/.git": true,
        // CRITICAL: Exclude ha-core from file enumeration to prevent Pylance delays
        "/mnt/development/GitHub/ha-core": true,
        "**/ha-core": true
    },

    // PERFORMANCE: Reduce file watching overhead
    "files.watcherExclude": {
        "**/__pycache__/**": true,
        "**/.mypy_cache/**": true,
        "**/.pytest_cache/**": true,
        "**/.ruff_cache/**": true,
        "**/node_modules/**": true,
        // CRITICAL: Don't watch ha-core files to prevent enumeration overhead
        "/mnt/development/GitHub/ha-core/**": true,
        "**/ha-core/**": true
    },

    // File associations for synchronized scripts
    "files.associations": {
        "lint.py": "python",
        "lint.sh": "shellscript"
    },

    // Related files configuration
    "explorer.fileNesting.enabled": true,
    "explorer.fileNesting.patterns": {
        "lint.py": "lint.sh"
    },

    // Test discovery
    "python.testing.pytestEnabled": true,
    "python.testing.pytestPath": "/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/pytest",
    "python.testing.pytestArgs": [
        "tests/"
    ],
    "python.testing.unittestEnabled": false,

    // Terminal settings
    "terminal.integrated.env.linux": {
        "PYTHONPATH": "${workspaceFolder}/src",
        "VIRTUAL_ENV": "${workspaceFolder}/.venv",
        "PATH": "${workspaceFolder}/.venv/bin:${env:PATH}"
    },
    "terminal.integrated.shellIntegration.enabled": true,
    "terminal.integrated.profiles.linux": {
        "bash (venv)": {
            "path": "bash",
            "args": ["-c", "source .venv/bin/activate && exec bash"],
            "icon": "terminal-bash"
        }
    },
    "terminal.integrated.defaultProfile.linux": "bash (venv)",
    "terminal.integrated.automationProfile.linux": {
        "path": "bash",
        "args": ["-c", "source .venv/bin/activate && exec bash"]
    },

    // Python environment activation for terminals
    "python.terminal.activateEnvironment": true,
    "python.terminal.activateEnvInCurrentTerminal": true,

    // GitHub Copilot configuration (OPTIMIZED)
    "github.copilot.enable": {
        "*": true,
        "plaintext": false,  // Disabled for non-code files to save memory
        "markdown": true,
        "scminput": false
    },
    "github.copilot.editor.enableAutoCompletions": true,
    "github.copilot.advanced": {
        "length": 1500,      // Reduced from 3000 to save memory
        "temperature": 0.1,
        "top_p": 1,
        "inlineSuggestEnable": true
    },

    // Agent mode settings
    "chat.agent.enabled": true,
    "chat.agent.maxRequests": 25,
    "github.copilot.chat.agent.autoFix": true,
    "github.copilot.chat.agent.runTasks": true,

    // Note: Terminal allowlist is configured at user level (~/.config/Code/User/settings.json)
    // Python development tools from this project have been added to user settings for global availability

    // Accessibility settings to fix terminal output issues
    "accessibility.signals.terminalCommandFailed": { "sound": "off" },
    "accessibility.signals.terminalCommandSucceeded": { "sound": "off" },
    "accessibility.verbosity.terminal": false,

    // Standalone Bandit extension configuration (if installed)
    "bandit.args": ["-c", "pyproject.toml"],
    "bandit.path": [
        "/home/jshessen/Development/GitHub/ha-external-connector/.venv/bin/bandit"
    ],
    "python-envs.pythonProjects": [
        {
            "path": "",
            "envManager": "ms-python.python:venv",
            "packageManager": "ms-python.python:pip"
        }
    ],

    // GitHub Copilot custom instructions configuration
    "github.copilot.chat.codeGeneration.useInstructionFiles": true,
    "chat.instructionsFilesLocations": [
        ".github/instructions"
    ],

    // GitHub Copilot tool auto-approval configuration
    "github.copilot.chat.tools.autoApprove": true,
    "github.copilot.chat.tools.terminal.autoApprove": {
        // === SYSTEM COMMANDS ===
        "echo": true,
        "ls": true,
        "pwd": true,
        "cat": true,
        "head": true,
        "tail": true,
        "wc": true,
        "grep": true,
        "find": true,
        "test": true,
        "which": true,
        "whoami": true,
        "date": true,

        // === SAFE FILE OPERATIONS ===
        "mkdir": true,
        "touch": true,
        "cp": true,
        "mv": true,

        // === GIT OPERATIONS ===
        "git": true,

        // === ENVIRONMENT MANAGEMENT ===
        "source": true,

        // === PYTHON DEVELOPMENT ===
        "python": true,
        "pip": true,
        "poetry": true,

        // === CODE QUALITY TOOLS ===
        "ruff": true,
        "pylint": true,
        "mypy": true,
        "black": true,
        "pytest": true,
        "make": true,

        // === AWS CLI (with pager safety) ===
        "aws --no-cli-pager": true,
        "/^aws\\s+.*--no-cli-pager/": true,

        // === REGEX PATTERNS FOR FLEXIBILITY ===
        "/^python\\s+-c\\s+/": true,
        "/^python\\s+scripts\\//": true,
        "/^\\$\\{workspaceFolder\\}/": true,

        // === SECURITY DENIALS ===
        "rm": false,
        "sudo": false,
        "chmod": false,
        "chown": false,
        "/.*\\brm\\b.*/": false,
        "/.*\\bsudo\\b.*/": false,

        // === AWS CLI WITHOUT PAGER (denied for safety) ===
        "/^aws\\s+(?!.*--no-cli-pager)/": false
    }
}
